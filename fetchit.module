<?php
ini_set(‘error_reporting’, E_ALL);
// $Id$
/*
 * @file
 * fetchit module
 * creates menu items and pages that contain the output of external db connections in various formats
 *
 * a custom drupal 6.x module created at Leonard Rice Engineers
 */
/*
 * fetchit constants
 */
include 'fetchit_constants.php';
/*
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well.
 * 
 * do not use this hook because I want to completely control the page content below
 * 
 */
/*
function fetchit_help($path, $arg) {
  switch ($path) {
    case 'fetchit_menu':
      // Here is some help text for the fetchit module pages
      return t('The fetchit module and fetchit custom content types allow the creation of pages that query external databases and display the results in various formats.');
    DEFAULT:
      // Here is some help text for the fetchit module pages
      return t('The fetchit module and fetchit custom content types allow the creation of pages that query external databases and display the results in various formats.');
  }
}
*/
/*
 * Implementation of hook_perm().
 */
function fetchit_perm() {
  return array('access fetchit pages');
}
/*
 * Implementation of hook_menu()
 * 
 * this module creates a menu item in the nav menu
 * and then as many child menu items as there are enabled records in the fetchit_data content type
 * note that 
 */
function fetchit_menu() {
	/*
	 * get the fetchit settings
	 */
	$settings = getFetchitSettings();
	/*
	 * create the main fetchit menu item
	 */
	$items[$settings['root_menu_name']] = array(
		'title' => $settings['root_menu_title'],
		'page callback' => 'fetchit_main_page',
		'access arguments' => array('access fetchit pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	/*
	 * create the menu items for every "displayable" fetchit item
	 * 
	 * get the fetchit content records (nodes) for each content type
	 * and if they are marked as page content, then create menu items for them
	 * and also reset the fetchit page content table and then rebuild it 
	 */
	$mytable = F_DR_PAGE_CONTENT_TBL;
	$results1=db_query('DELETE FROM {%s}',$mytable);
	/*
	 * loop through the list of fetchit content types
	 * each record of content type "fetchit_content_types" maps to one type of content (think class)
	 * there should be AT MOST one record of CCK type "fetchit_content_types" for each fetchit content type
	 *   (more than one record could cause problems...i'll use a group by query to try and prevent these problems though)
	 * 
	 * note: these records map 1 to 1 to other cck types that stand for
	 *   each TYPE of fetchit content
	 *   there can be as many records (instantiations) of these content types as desired,
	 *   where each record is a specific realization of that type (think of content type instances)
	 */
	$myfield = F_DR_TYPES_FLD.", max(".F_DR_TYPES_FLD_ENABLED.") as enabled";
	$mytable = F_DR_TYPES_TBL;
	$mygroupby = F_DR_TYPES_FLD;
	$f_dr_types_fld = F_DR_TYPES_FLD;
	$results1 = db_query('SELECT %s FROM {%s} GROUP BY %s',$myfield,$mytable,$mygroupby);
	$page_counter = 0;
	while ($row1 = db_fetch_object($results1)) {
		if ($row1->enabled) {
			$type = $row1->$f_dr_types_fld;
			$myfield = "*";
			$results2 = db_query('SELECT %s FROM {%s}',$myfield,getFetchitTypeTableName($type));
			while ($row2 = db_fetch_object($results2)) {
				$nid = (int) $row2->nid;
				$mytable = F_DR_CONTENT_ENABLED_TBL;
				$enabled_fld = F_DR_CONTENT_ENABLED_FLD;
				$enabled = fetchit_get_cck_val($mytable,$enabled_fld,F_DR_NID_FLD,$nid);
				if ($enabled == 1) { // enabled for page (1) and not blocks (2) 
					$mytable = F_DR_PAGE_CONTENT_TBL;
					$page_fld = F_DR_PAGE_CONTENT_PAGE_FLD;
					$type_fld = F_DR_PAGE_CONTENT_TYPE_FLD;
					$nid_fld = F_DR_PAGE_CONTENT_NID_FLD;
					$results3 = db_query("INSERT INTO {%s}(%s,%s,%s) VALUES (%d,%d,%d)",$mytable,$page_fld,$type_fld,$nid_fld,$page_counter,$type,$nid);
					$items[$settings['root_menu_name'].'/query'.trim($page_counter)] = array(
						'title' => fetchit_get_cck_val("node","title",F_DR_NID_FLD,$nid),
						'page callback' => 'fetchit_query_page',
						'page arguments' => array(1),
						'access arguments' => array('access fetchit pages'),
						'weight' => $page_counter,
					);
					++$page_counter;
				}
			}
		}
	}
	/*
	 * create the menu items for the db operation and json callback functions
	 * 
	 * these do not have displayable content, but instead DO something with the arguments passed to them
	 * 
	 * the db operations function does db action things with the args in a defined action sql and returns success/failure 
	 * 
	 * the json function does db selection things with the args in a defined selection action sql and returns the result as json
	 *   - initially gviz data source json, but we can expand it to other forms 
	 */
	$items['fetchit_dbop'] = array(
		'title' => t('fetchit database operations'),
		'page callback' => 'fetchit_dbop',
		'access arguments' => array('access fetchit pages'),
		'type' => MENU_CALLBACK,
	);
	$items['fetchit_json'] = array(
		'title' => t('fetchit_database query to json'),
		'page callback' => 'fetchit_json',
		'access arguments' => array('access fetchit pages'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}
function fetchit_dbop($ndx=NULL,$key=NULL,$arg1=NULL,$arg2=NULL,$arg3=NULL) {
	echo b43_timeseries_json_gv($ndx,$key,$arg1,$arg2,$arg3);
}
/*
 * convert a type index into a table name
 */
function getFetchitTypeTableName($type) {
	switch ($type) {
		case 0:
			return F_DR_TYPE_0_TBL;
		case 1:
			return F_DR_TYPE_1_TBL;
		case 2:
			return F_DR_TYPE_2_TBL;
		case 3:
			return F_DR_TYPE_3_TBL;
		case 4:
			return F_DR_TYPE_4_TBL;
		case 5:
			return F_DR_TYPE_5_TBL;
		case 6:
			return F_DR_TYPE_6_TBL;
		case 7:
			return F_DR_TYPE_7_TBL;
		case 8:
			return F_DR_TYPE_8_TBL;
		case 9:
			return F_DR_TYPE_9_TBL;
		case 10:
			return F_DR_TYPE_10_TBL;
		default:
			return;
	}
}
function getFetchitSettings() {
	/*
	 * get the fetchit settings from the fetchit_settings content type, which should be in table [content_type_fetchit_settings] 
	 */
	$settings = array();
	$myfield="*";
	$mytable="content_type_fetchit_settings";
	$results=db_query('SELECT %s FROM {%s}',$myfield,$mytable);
	$counter = 0;
	while ($row = db_fetch_object($results)) {
		++$counter;
		/*
		 *  note that many of the internal CCK content type field names still contain "fetch_it"
		 *  since this can not be changed without rebuilding the fields from scratch
		 */
		$settings['root_menu_name'] = $row->field_fetch_it_root_menu_name_value;
		$settings['root_menu_title'] = $row->field_fetch_it_root_menu_title_value;
		$settings['data_records_max'] = $row->field_fetch_it_data_max_value;
	}
	if (is_null($settings['root_menu_name']) or !strlen(trim($settings['root_menu_name']))) $settings['root_menu_name'] = 'fetchit_menu';
	if (is_null($settings['root_menu_title']) or !strlen(trim($settings['root_menu_title']))) $settings['root_menu_title'] = 'fetchit';
	if (is_null($settings['data_records_max']) or $settings['data_records_max']<1) $settings['data_records_max'] = 20;
	switch ($counter) {
		case 0: //warn the user - need to add a settings record
			drupal_set_message(t('<i>Warning, the fetchit settings record is missing.  Please create a new fetchit settings record.  Currently using default fetchit settings.</i>'),'Warning');
			break;
		case 1: //no warning
			break;
		default: //warn the user - too many settings records
			drupal_set_message(t('<i>Warning, more than one fetchit settings record were found.  Please delete all but one fetchit settings record.  Currently using the settings on the last record found.</i>'),'Warning');
	}
	return $settings;
}
/*
 * fetchit main page callback  
 */
function fetchit_main_page() {
  /*
   * note that many of the internal CCK content type field names still contain "fetch_it"
   * since this can not be changed without rebuilding the fields from scratch
   */
  $fetchit_main_page_body=db_result(db_query('SELECT field_fetch_it_main_page_body_value FROM {content_type_fetchit_settings}'));
  if (strlen(trim($fetchit_main_page_body)) > 0) {
    $output ='<p>'.$fetchit_main_page_body.'</p>'; 
  } else {
    global $user;
    $user_uid = (int) $user->uid;
    $user_name = $user->name;
    $today = date('F j, Y');
    $output = '<p>'.t('Welcome, '.$user_name.', to the external query module (fetchit) main page.').'</p>';
    $results = fetchit_menu();
    $output .= '<p><i>'.t('You can modify this page content by modifying the fetchit_settings content type record. (Do NOT create more that one record/node of this type.)').'</i></p>';
  }
  return $output;
}
/*
 * fetchit generic query page callback
 * (returns HTML output)
 */
function fetchit_query_page($query) {
	$this_ndx=(int)substr($query,5);
	$type = fetchit_get_cck_val(F_DR_PAGE_CONTENT_TBL,F_DR_PAGE_CONTENT_TYPE_FLD,F_DR_PAGE_CONTENT_PAGE_FLD,$this_ndx);
	$nid = fetchit_get_cck_val(F_DR_PAGE_CONTENT_TBL,F_DR_PAGE_CONTENT_NID_FLD,F_DR_PAGE_CONTENT_PAGE_FLD,$this_ndx);
	$output = getFetchitContent($type,$nid,1);
	return $output;
}
/*
 * handle fetchit block content
 */
function fetchit_block($op = 'list', $delta = 0, $edit = array()) {
	switch ($op) {
		case 'list':
			/*
			 * reset the fetchit block content table and then rebuild it 
			 */
			$mytable = F_DR_BLOCK_CONTENT_TBL;
			$results1 = db_query('DELETE FROM {%s}',$mytable);
			/*
			 * loop through the list of fetchit content types
			 * each record of content type "fetchit_content_types" maps to one type of content (think class)
			 * there should be AT MOST one record of CCK type "fetchit_content_types" for each fetchit content type
			 *   (more than one record could cause problems...i'll use a group by query to try and prevent them though)
			 * 
			 * note: these records map to the other cck types that stand for
			 *   each TYPE of fetchit content (think of type classes)
			 *   there can be as many records for these other content types as desired,
			 *   where each record is a specific realization of that type (think of content type instances)
			 */
			$myfield = F_DR_TYPES_FLD.", max(".F_DR_TYPES_FLD_ENABLED.") as enabled";
			$mytable = F_DR_TYPES_TBL;
			$mygroupby = F_DR_TYPES_FLD;
			$f_dr_types_fld = F_DR_TYPES_FLD;
			$results1 = db_query('SELECT %s FROM {%s} GROUP BY %s',$myfield,$mytable,$mygroupby);
			while ($row1 = db_fetch_object($results1)) {
			/*
			 * only process the cck records if this fetchit content type is enabled
			 * in this case, processing means creating the block content that drupal stores and assigns a delta index
			 */
				if ($row1->enabled) {
					/*
					 * get the individual content records for this fetchit content type and see if they are enabled for blocks  
					 */
					$type = (int) $row1->$f_dr_types_fld;
					$myfield = "*";
					$results2 = db_query('SELECT %s FROM {%s}',$myfield,getFetchitTypeTableName($type));
					while ($row2 = db_fetch_object($results2)) {
						$nid = (int) $row2->nid;
						$mytable = F_DR_CONTENT_ENABLED_TBL;
						$enabled_fld = F_DR_CONTENT_ENABLED_FLD;
						$enabled = fetchit_get_cck_val($mytable,$enabled_fld,F_DR_NID_FLD,$nid);
						if ($enabled == 2) {
							$blocks[$nid]['info'] = fetchit_get_cck_val("node","title",F_DR_NID_FLD,$nid);
							$blocks[$nid]['cache'] = BLOCK_NO_CACHE;
							$mytable = F_DR_BLOCK_CONTENT_TBL;
							$delta_fld = F_DR_BLOCK_CONTENT_DELTA_FLD;
							$type_fld = F_DR_BLOCK_CONTENT_TYPE_FLD;
							$nid_fld = F_DR_BLOCK_CONTENT_NID_FLD;
							$results3 = db_query("INSERT INTO {%s}(%s,%s,%s) VALUES (%d,%d,%d)",$mytable,$delta_fld,$type_fld,$nid_fld,$nid,$type,$nid);
						}
					}
				}
			}
			return $blocks;
		case 'configure':
			return $form;
		case 'save':
			break;
		case 'view':
			$mytable = F_DR_BLOCK_CONTENT_TBL;
			$delta_fld = F_DR_BLOCK_CONTENT_DELTA_FLD;
			$type_fld = F_DR_BLOCK_CONTENT_TYPE_FLD;
			$nid_fld = F_DR_BLOCK_CONTENT_NID_FLD;
			$type = fetchit_get_cck_val($mytable,$type_fld,$delta_fld,$delta);
			$nid = fetchit_get_cck_val($mytable,$nid_fld,$delta_fld,$delta);
			$block['subject'] = fetchit_get_cck_val("node","title",F_DR_NID_FLD,$nid);
			$block['content'] = getFetchitContent($type,$nid,2);
			return $block;
	}
}
/*
 * run the fetchit prequery
 */
function runFetchitPreQuery($nid) {
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	$preqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($preqry))) {
		$db_object = pg_query($db_handle, $preqry);
	}
	return $db_object;
}
/*
 * run the fetchit postquery
 */
function runFetchitPostQuery($nid) {
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	$postqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($postqry))) {
		$db_object = pg_query($db_handle, $postqry);
	}
	return $db_object;
}
/*
 * run the fetchit prequery
 */
function fetchit_run_prequery(&$err,$nid) {
	if ($db_type = fetchit_get_db_type($err,$nid)) {
		if ($db_handle = fetchit_get_db_handle($err,$nid)) {
			if (strlen(trim($preqry = fetchit_get_preqry($err,$nid)))) {
				$result = fetchit_run_query($err,$db_type,$db_handle,$preqry);
			}
		}
	}
	return $result;
}
function fetchit_get_preqry(&$err,$nid) {
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	return fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
}
/*
 * run the fetchit postquery
 */
function fetchit_run_postquery(&$err,$nid) {
	if ($db_type = fetchit_get_db_type($err,$nid)) {
		if ($db_handle = fetchit_get_db_handle($err,$nid)) {
			if (strlen(trim($postqry = fetchit_get_postqry($err,$nid)))) {
				$result = fetchit_run_query($err,$db_type,$db_handle,$postqry);
			}
		}
	}
	return $result;
}	
function fetchit_get_postqry(&$err,$nid) {
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	return fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
}
/*
 * creates the appropriate content for the content type (html table, etc.) and destination (page, block, etc.)  
 */
function getFetchitContent($type, $nid, $dest) {
	$mytable = F_DR_CONTENT_ENABLED_TBL;
	$myfield = F_DR_CONTENT_ENABLED_FLD;
	$enabled = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if ($dest == $enabled) {
		//runFetchitPreQuery($nid);
		//fetchit_run_prequery($err,$nid);
		$output = fetchit_get_cck_val(F_DR_NODE_BODY_TBL,F_DR_NODE_BODY_FLD,F_DR_NID_FLD,$nid);
		$mytable = F_DR_CONTENT_ABOVE_TBL;
		$myfield = F_DR_CONTENT_ABOVE_FLD;
		$output .= fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
		switch ($type) {
			case F_DR_TYPE_HTML_TABLE_NDX: //html table  
				$output .= drupal_get_form('fetchit_table_html_form_'.$nid,$nid);
				//$output .= drupal_get_form('fetchit_table_html_test_form_builder',$nid);
				break;
			case F_DR_TYPE_GVIZ_NDX: //gviz
				$output .= fetchit_gviz_form($nid);
				break;
			case F_DR_TYPE_PARAMETER_NDX: //parameter form  
				$output .= drupal_get_form('fetchit_parameter_form_'.$nid,$nid);
				break;
			case F_DR_TYPE_APPEND_RECORD_NDX: //append new record form  
				$output .= drupal_get_form('fetchit_append_record_form_'.$nid,$nid);
				break;
			case F_DR_TYPE_EDITABLE_GRID_NDX: // editable grid form
				$output .= drupal_get_form('fetchit_editable_grid_form_'.$nid,$nid);
				break;
			case F_DR_TYPE_OL_MAP_NDX: //open layers map
				$output .= fetchit_ol_form($nid);
				break;
			default: //oops
				$output .= "<br><b>Unsupported form type.  Please contact the site developer.</b><br>";
				break;
		}
		$mytable = F_DR_CONTENT_BELOW_TBL;
		$myfield = F_DR_CONTENT_BELOW_FLD;
		$output .= fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	}
	return $output;
}
/*
 * forms hook
 */
function fetchit_forms($form_id, $args) {
	$forms=array();
	if (strpos($form_id, 'fetchit_table_html_form_') !== FALSE) {
		$forms[$form_id] = array(
			'callback' => 'fetchit_table_html_form_builder',
			'callback arguments' => array($form_id, $args,),
    	);
	}
	if (strpos($form_id, 'fetchit_append_record_form_') !== FALSE) {
		$forms[$form_id] = array(
			'callback' => 'fetchit_append_record_form_builder',
			'callback arguments' => array($form_id, $args,),
		);
	}
	if (strpos($form_id, 'fetchit_parameter_form_') !== FALSE) {
		$forms[$form_id] = array(
			'callback' => 'fetchit_parameter_form_builder',
			'callback arguments' => array($form_id, $args,),
		);
	}
	if (strpos($form_id, 'fetchit_editable_grid_form_') !== FALSE) {
		$forms[$form_id] = array( 
			//'callback' => 'fetchit_editable_grid_form_builder',
			'callback' => 'fetchit_table_edit_form_builder',
			'callback arguments' => array($form_id, $args,),
		);
	}
	if (strpos($form_id, 'fetchit_gviz_form_') !== FALSE) {
		$forms[$form_id] = array(
			'callback' => 'fetchit_gviz_form_builder',
			'callback arguments' => array($form_id, $args,),
		);
	}
	if (strpos($form_id, 'fetchit_ol_form_') !== FALSE) {
		$forms[$form_id] = array(
			'callback' => 'fetchit_ol_form_builder',
			'callback arguments' => array($form_id, $args,),
		);
	}
	return $forms;
}
function getFetchitDBObjectLocal($db_type,$view_name,$field_list,$user_uid_field,$onerow) {
	if(strlen($user_uid_field)) {
		$uid = TRUE;
	} else {
		$uid = FALSE;
	}
	if(!strlen($field_list)) $field_list = "*";
	/*
	 * create the query
	 */
	$query = "SELECT $field_list FROM $view_name";
	if ($uid) {
		global $user;
		$user_uid = $user->uid;
		$query .= " WHERE $user_uid_field = $user_uid"; //assumes this is an integer
	}
	/*
	 * create the db object
	 */
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$db_object = db_query($query);
			break;
		case F_DR_DBTYPE_MYSQL:
			$db_object = db_query($query);
			break;
		case F_DR_DBTYPE_MSSQL:
			drupal_set_message(t('Currently unsupported database type:'.$db_type),'error');
			return $db_object;
			break;
		default:
			drupal_set_message(t('Currently unsupported database type: '.$db_type),'error');
			return $db_object;
	}
	return $db_object;
}
function getFetchitDBObjectRemote($db_type,$db_host,$db_port,$db_user,$db_password,$db_name,$view_name,$field_list,$user_uid_field,$onerow) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$db_string = "host=$db_host port=$db_port user=$db_user password=$db_password dbname=$db_name";
			$db_handle = pg_connect($db_string);
			break;
		case F_DR_DBTYPE_MYSQL:
			drupal_set_message(t('Currently unsupported database type: '.$db_type),'error');
			return $db_object;
			break;
		case F_DR_DBTYPE_MSSQL:
			drupal_set_message(t('Currently unsupported database type: '.$db_type),'error');
			return $db_object;
			break;
		default:
			drupal_set_message(t('Currently unsupported database type: '.$db_type),'error');
			return $db_object;
	}
	if (!$db_handle) {
		drupal_set_message(t('Unable to connect to database server with given settings. Please check the database connection configuration or contact the database administrator.'),'error');
		return $db_object;
	}
	if(strlen($user_uid_field)) {
		$uid = TRUE;
	} else {
		$uid = FALSE;
	}
	if(!strlen($field_list)) $field_list = "*";
	/*
	 * create the query
	 */
	$query = "SELECT $field_list FROM $view_name";
	if ($uid) {
		global $user;
		$user_uid = $user->uid;
		$query .= " WHERE $user_uid_field = $user_uid"; //assumes this is an integer
	}
	if ($onerow) {
		$query .= " LIMIT 1";
	}
	/*
	 * create the db object
	 */
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$db_object = pg_query($db_handle, $query);
			//pg_close($db_handle);
			break;
		case F_DR_DBTYPE_MYSQL:
			drupal_set_message(t('Remote MySQL databases currently unsupported.'),'error');
			return $db_object;
			break;
		case F_DR_DBTYPE_MSSQL:
			drupal_set_message(t('Currently unsupported database type:'.$db_type),'error');
			return $db_object;
			break;
		default:
			drupal_set_message(t('Currently unsupported database type: '.$db_type),'error');
			return $db_object;
	}
	return $db_object;
}
function getFetchitDBObject ($nid,$view_name,$field_list,$user_uid_field,$onerow) {
	/*
	 * db type is REQUIRED - MUST know database type, even if it is local
	 * (in Drupal 7 PDO is used, so this goes away)
	 */
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		drupal_set_message(t('Missing database type.'),'error');
		return $db_object;	
	}
	/*
	 * db host - not required (defaults to local)
	 * now check if database is local (i.e. drupal) or remote (anything else)
	 * reset db_host to "local" if so
	 */
	if(!strlen(trim($db_host = fetchit_get_cck_val(F_DR_DB_HOST_TBL,F_DR_DB_HOST_FLD,F_DR_NID_FLD,$nid)))) {
		$db_local = TRUE;
	} elseif (strtolower(trim($db_host)) == "local") {
		$db_local = TRUE;
	} else {
		$db_local = FALSE;
	}
	/*
	 * the table name is required for all cases
	 */
	if(!strlen(trim($view_name))) {
		drupal_set_message(t('Missing view/table name.'),'error');
		return $db_object;
	}
	/*
	 * now create the object
	 */
	if ($db_local) {
		$db_object = getFetchitDBObjectLocal($db_type,$view_name,$field_list,$user_uid_field,$onerow);
	} else {
		/*
		 * these are required for remote db connections
		 */
		if(!strlen(trim($db_port = fetchit_get_cck_val(F_DR_DB_PORT_TBL,F_DR_DB_PORT_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database port.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_name = fetchit_get_cck_val(F_DR_DB_NAME_TBL,F_DR_DB_NAME_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database name.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_user = fetchit_get_cck_val(F_DR_DB_USER_TBL,F_DR_DB_USER_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database user name.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_password = fetchit_get_cck_val(F_DR_DB_PWRD_TBL,F_DR_DB_PWRD_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database user password.'),'error');
			return $db_object;
		}
		$db_object = getFetchitDBObjectRemote($db_type,$db_host,$db_port,$db_user,$db_password,$db_name,$view_name,$field_list,$user_uid_field,$onerow);
	}
	return $db_object;
}
function getFetchitDBObjectMain ($nid,$onerow) {
	/*
	 * db type is REQUIRED - MUST know database type, even if it is local
	 * (in Drupal 7 PDO is used, so this goes away)
	 */
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		drupal_set_message(t('Missing database type.'),'error');
		return $db_object;	
	}
	/*
	 * db host - not required (defaults to local)
	 * now check if database is local (i.e. drupal) or remote (anything else)
	 * reset db_host to "local" if so
	 */
	if(!strlen(trim($db_host = fetchit_get_cck_val(F_DR_DB_HOST_TBL,F_DR_DB_HOST_FLD,F_DR_NID_FLD,$nid)))) {
		$db_local = TRUE;
	} elseif (strtolower(trim($db_host)) == "local") {
		$db_local = TRUE;
	} else {
		$db_local = FALSE;
	}
	/*
	 * the table name is required for all cases
	 */
	if(!strlen(trim($view_name = fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid)))) {
		drupal_set_message(t('Missing view/table name.'),'error');
		return $db_object;
	}
	/*
	 * check on the UID field
	 */
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	/*
	 * now create the object
	 */
	if ($db_local) {
		$db_object = getFetchitDBObjectLocal($db_type,$view_name,$user_uid_field,$onerow);
	} else {
		/*
		 * these are required for remote db connections
		 */
		if(!strlen(trim($db_port = fetchit_get_cck_val(F_DR_DB_PORT_TBL,F_DR_DB_PORT_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database port.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_name = fetchit_get_cck_val(F_DR_DB_NAME_TBL,F_DR_DB_NAME_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database name.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_user = fetchit_get_cck_val(F_DR_DB_USER_TBL,F_DR_DB_USER_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database user name.'),'error');
			return $db_object;
		}
		if(!strlen(trim($db_password = fetchit_get_cck_val(F_DR_DB_PWRD_TBL,F_DR_DB_PWRD_FLD,F_DR_NID_FLD,$nid)))) {
			drupal_set_message(t('Missing database user password.'),'error');
			return $db_object;
		}
		$db_object = getFetchitDBObjectRemote($db_type,$db_host,$db_port,$db_user,$db_password,$db_name,$view_name,$user_uid_field,$onerow);
	}
	return $db_object;
}
function fetchitRemoveFromList($comma_delimited_list,$item_to_remove) {
	$delimiter = ',';
	$items = split($comma_delimited_list,$delimiter);
	$new_list = '';
	$i = 0;
	foreach ($items as $item) {
		if (!trim($item)==trim($item_to_remove)) {
			if ($i) $new_list .= ',';
			$new_list .= $item; 
			$i++;
		}
	}
	return $new_list;
}
function fetchit_get_db_type(&$err,$nid) {
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		$err=1;
	}
	return $db_type;
}
function fetchit_get_db_handle(&$err,$nid) {
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		$err=1;
		return $db_handle;
	}
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			/*
			 * these are required for remote pg db connections
			 */
			if(!strlen(trim($db_host = fetchit_get_cck_val(F_DR_DB_HOST_TBL,F_DR_DB_HOST_FLD,F_DR_NID_FLD,$nid)))) {
				$err=2;
				return $db_handle;
			}
			if(!strlen(trim($db_port = fetchit_get_cck_val(F_DR_DB_PORT_TBL,F_DR_DB_PORT_FLD,F_DR_NID_FLD,$nid)))) {
				$err=3;
				return $db_handle;
			}
			if(!strlen(trim($db_name = fetchit_get_cck_val(F_DR_DB_NAME_TBL,F_DR_DB_NAME_FLD,F_DR_NID_FLD,$nid)))) {
				$err=4;
				return $db_handle;
			}
			if(!strlen(trim($db_user = fetchit_get_cck_val(F_DR_DB_USER_TBL,F_DR_DB_USER_FLD,F_DR_NID_FLD,$nid)))) {
				$err=5;
				return $db_handle;
			}
			if(!strlen(trim($db_password = fetchit_get_cck_val(F_DR_DB_PWRD_TBL,F_DR_DB_PWRD_FLD,F_DR_NID_FLD,$nid)))) {
				$err=6;
				return $db_handle;
			}
			/*
			 * create the pg connection
			 */
			$db_string = "host=$db_host port=$db_port user=$db_user password=$db_password dbname=$db_name";
			$db_handle = pg_connect($db_string);
			if(!$db_handle) {
				$err=7;
				return $db_handle;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $db_handle;
}
function fetchit_get_existing_selection_single(&$db_handle,&$db_type,&$record_select_table,&$key_field,&$user_uid_field) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($record_select_table))) {
						if(strlen(trim($key_field))) {
							$qry = "SELECT $key_field FROM $record_select_table";
							if (strlen(trim($user_uid_field))) {
								global $user;
								$user_uid = $user->uid;
								$qry .= " WHERE $user_uid_field = $user_uid";
							}
							$qry .= " LIMIT 1";
							$db_object = pg_query($db_handle,$qry);
							$row = pg_fetch_object($db_object);
							$selection = $row->$key_field;
							return $selection;
						}
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
			}
		}
	}
}
function fetchit_set_existing_selection_single(&$db_handle,&$db_type,&$record_select_table,&$key_field,&$user_uid_field,$val) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($record_select_table))) {
						if(strlen(trim($key_field))) {
							$qry = "DELETE FROM $record_select_table";
							if (strlen(trim($user_uid_field))) {
								global $user;
								$qry .= " WHERE $user_uid_field = ".$user->uid;
							}
							$db_result = pg_query($db_handle,$qry);
							$fldstr = $key_field;
							if (strlen(trim($user_uid_field))) {
								$fldstr .= ",$user_uid_field";
							}
							
							$qry = "INSERT INTO $record_select_table($fldstr) VALUES(".pg_escape_string($val);
							if (strlen(trim($user_uid_field))) {
								global $user;
								$user_uid = $user->uid;
								$qry .= ",$user_uid";
							}
							$qry .= ")";
							$db_result = pg_query($db_handle,$qry);
						}
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
			}
		}
	}
}
function fetchit_get_existing_selection_multiple(&$db_handle,&$db_type,&$record_select_table,&$key_field,&$user_uid_field) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($record_select_table))) {
						if(strlen(trim($key_field))) {
							$qry = "SELECT $key_field FROM $record_select_table";
							if (strlen(trim($user_uid_field))) {
								global $user;
								$user_uid = $user->uid;
								$qry .= " WHERE $user_uid_field = $user_uid";
							}
							$selection = array();
							$db_object = pg_query($db_handle,$qry);
							while($row = pg_fetch_object($db_object)) {
								$selection[] = $row->$key_field;  
							};
							return $selection;
						}
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
			}
		}
	}	
}
function fetchit_set_existing_selection_multiple(&$db_handle,&$db_type,&$record_select_table,&$key_field,&$user_uid_field,$vals) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($record_select_table))) {
						if(strlen(trim($key_field))) {
							$qry = "DELETE FROM $record_select_table";
							if (strlen(trim($user_uid_field))) {
								global $user;
								$qry .= " WHERE $user_uid_field = ".$user->uid;
							}
							$db_object = pg_query($db_handle,$qry);
							$fldstr = $key_field;
							if (strlen(trim($user_uid_field))) {
								$fldstr .= ",$user_uid_field";
							}
							foreach ($vals as $val) {
								$qry = "INSERT INTO $record_select_table($fldstr) VALUES(".pg_escape_string($val);
								if (strlen(trim($user_uid_field))) {
									global $user;
									$user_uid = $user->uid;
									$qry .= ",$user_uid";
								}
								$qry .= ")";
								$db_result = pg_query($db_handle,$qry);
							}
						}
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
			}
		}
	}	
}
function fetchit_del_existing_selection_multiple(&$db_handle,&$db_type,&$deletion_table,&$key_field,&$user_uid_field,$vals) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($deletion_table))) {
						if(strlen(trim($key_field))) {
							foreach ($vals as $val) {
								$qry = "DELETE FROM $deletion_table WHERE $key_field = $val";
								if (strlen(trim($user_uid_field))) {
									global $user;
									$user_uid = $user->uid;
									$qry .= " AND $user_uid_field = $user_uid";
								}
								$db_result = pg_query($db_handle,$qry);
							}
						}
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
			}
		}
	}	
}
function fetchit_get_existing_selection_nid (&$db_handle,&$db_type,$nid) {
	if ($db_handle) {
		if ($db_type) {
			if ($nid) {
				$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
				switch ($record_select) {
					case 0: // static html - no selection - do nothing
						break;
					case 1: // radio button record selection
						$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
						$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
						$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
						$result = fetchit_get_existing_selection_single($db_handle,$db_type,$record_select_table,$key_field,$user_uid_field); 
						return $result;
					case 2: // check boxes button record selection
						$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
						$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
						$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
						$result = fetchit_get_existing_selection_multiple($db_handle,$db_type,$record_select_table,$key_field,$user_uid_field); 
						return $result;
					default:
				}
			}
		}
	}
}
function fetchit_set_existing_selection_nid (&$db_handle,&$db_type,$nid,$val) {
	if ($db_handle) {
		if ($db_type) {
			if ($nid) {
				$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
				switch ($record_select) {
					case 0: // static html - no selection - do nothing
						break;
					case 1: // radio button record selection
						$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
						$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
						$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
						$result = fetchit_set_existing_selection_single($db_handle,$db_type,$record_select_table,$key_field,$user_uid_field,$val); 
						return $result;
					case 2: // check boxes button record selection
						$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
						$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
						$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
						$result = fetchit_set_existing_selection_multiple($db_handle,$db_type,$record_select_table,$key_field,$user_uid_field,$val); 
						return $result;
					case 3: // check boxes record deletion
						$deletion_table_name = trim(fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid));
						$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
						$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
						$result = fetchit_del_existing_selection_multiple($db_handle,$db_type,$deletion_table_name,$key_field,$user_uid_field,$val); 
						return $result;
					default:
				}
			}
		}
	}
}
/*
 * define the html table form
 * (with optional radio and checkbox column to make it a selection form)
 */
function fetchit_table_html_form_builder(&$form_state,$form_id,$args) {
	/*
	 * redefine the arguments from the args array
	 * (&$form_state, $nid, $type) 
	 */
	$nid = $args[0];
	$form['nid'] = array('#type' => 'value','#value' => $nid);
	/*
	 * create the form fieldset
	 */
	/* BROKEN WHEN USING THEME FUNCTION...
	$fieldset_name = F_DR_HTML_BASENAME.$nid;
	$form['fieldset_name'] = array('#type' => 'value','#value' => $fieldset_name);
	$mytable = F_DR_CONTENT_TITLE_TBL;
	$myfield = F_DR_CONTENT_TITLE_FLD;
	$title = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_DESC_TBL;
	$myfield = F_DR_CONTENT_DESC_FLD;
	$desc = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSBL_TBL;
	$myfield = F_DR_CONTENT_CLLPSBL_FLD;
	$cllpsbl = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSD_TBL;
	$myfield = F_DR_CONTENT_CLLPSD_FLD;
	$cllpsd = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$form = array();
	$form[$fieldset_name] = array(
		'#title' => t($title),
		'#type' => 'fieldset',
		'#description' => t($desc),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	*/
	/*
	 * create the form content
	 * a simple pg table
	 * store all the data in the form
	 * and then use a theme function to render it
	 */
	if($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)) {
		$form['db_type'] = array('#type' => 'value','#value' => $db_type);
	} else {
		$err = 1;
		drupal_set_message("An error occurred when accessing the database type. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	if ($db_handle = fetchit_get_db_handle(&$err,$nid)) {
		$form['db_handle'] = array('#type' => 'value','#value' => $db_handle);
	} else {
		if ($err) drupal_set_message("An error occurred when creating the database connection. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	/*
	 * run the pre query before doing anything else 
	 */
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	$preqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($preqry))) {
		if (strtolower(substr($preqry,0,4)) == 'php.') {
			$thefunction = substr($preqry,4); 
    		global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$preqry);
		}
	}
	/*
	 * get the table's data, then get the field count, field names and field types
	 * note that here we are just creating the form objects, not rendering them
	 * that will be done in the theme function
	 * however, note also that some data are stored in the form in NON RENDERABLE objects, such as value objects
	 * this makes it easy to pass parameters to the theme function
	 * also not that I tried to make it db agnostic at this level, though the underlying routines
	 * were initially working for pg only
	 */
	if(strlen(trim($view_name = fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid)))) {
		$form['view_name'] = array('#type' => 'value','#value' => $view_name);
	} else {
		$err=8;
		drupal_set_message("An error occurred when accessing the table/view name. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	$form['#theme'] = 'fetchit_table_html_form_builder';
	$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
	$submit_label = trim(fetchit_get_cck_val(F_DR_CONTENT_SUBMIT_LABEL_TBL,F_DR_CONTENT_SUBMIT_LABEL_FLD,F_DR_NID_FLD,$nid));
	$db_data_object = fetchit_get_data_object($err,$db_type,$db_handle,$view_name,$user_uid_field);
	$field_count = fetchit_get_field_count($err,$db_type,$db_data_object);
	$row_count = fetchit_get_row_count($err,$db_type,$db_data_object);
	$form['field_count'] = array('#type' => 'value','#value' => $field_count);
	$form['row_count'] = array('#type' => 'value','#value' => $row_count);
	$field_names = array();
	$field_names = fetchit_get_field_names($err,$db_type,$db_data_object);
	$field_types = array();
	$field_types = fetchit_get_field_types($err,$db_type,$db_data_object);
	//the following could be a single value or an array of values
	$existing_selections = fetchit_get_existing_selection_nid($db_handle,$db_type,$nid);
	switch ($record_select) {
		case 0:
			break;
		case 1:
			$options = array();
			$default_value = 1;
			for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
				$options[$row_ndx+1] = '';
			}
			break;
		case 2:
			$options = array();
			$default_values = array();
			for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
				$options[$row_ndx+1] = '';
			}
			break;
		case 3:
			$options = array();
			$default_values = array();
			for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
				$options[$row_ndx+1] = '';
			}
			break;
		default:
	}
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		$type = 'markup';
		if ( $field_names[$field_ndx] == $user_uid_field) {
			$type = 'value';
			$form['uid_field_ndx'] = array('#type' => 'value','#value' => ($field_ndx+1) );
			$uid_field_now = TRUE; 
		} else {
			$uid_field_now = FALSE;
		}
		if ( $field_names[$field_ndx] == $key_field ) {
			$type = 'value';
			$form['key_field_ndx'] = array('#type' => 'value','#value' => ($field_ndx+1) );
			$key_field_now = TRUE; 
		} else {
			$key_field_now = FALSE; 
		}
		$form['field_names'][$field_ndx] = array('#type' => 'value','#value' => $field_names[$field_ndx]);
		$form['field_types'][$field_ndx] = array('#type' => 'value','#value' => $field_types[$field_ndx]);
		for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
			$db_value = fetchit_get_data($err,$db_type,$db_data_object,$row_ndx,$field_ndx);
			$form['data'][$row_ndx][$field_ndx] = array('#type' => $type,'#value' => $db_value);
			// here is where we rebuild the last selected values and mark them as the defaults...
			if ($key_field_now) {
				switch ($record_select) {
					case 0:
						break;
					case 1:
						if ($db_value == $existing_selections) {
							$default_value = $row_ndx + 1;
						}
						break;
					case 2:
						foreach($existing_selections as $existing_selection) {
							if ($db_value == $existing_selection) {
								$default_values[] = $row_ndx + 1;
							}
						}
						break;
					case 3: //the defaults for deletion are none selected
						break;
					default:
				}
			}
		}
	}
	switch ($record_select) {
		case 0:
			break;
		case 1:
			$form['radios'] = array('#type' => 'radios','#options' => $options,'#default_value' => $default_value);
			/*
			 * add a submit button
			 */
			if (!strlen(trim($submit_label))) $submit_label="Submit";
			$element_name = "submit_$nid";
			$form[$element_name] = array(
				'#type' => 'submit',
				'#value' => t($submit_label),
			);
			/*
			 * establish the validate and submit functions to use
			 */
			$form['#validate'][] = 'fetchit_table_html_validate';
			$form['#submit'][] = 'fetchit_table_html_submit';
			break;
		case 2:
			$form['checkboxes'] = array('#type' => 'checkboxes','#options' => $options,'#default_value' => $default_values);
			/*
			 * add a submit button
			 */
			if (!strlen(trim($submit_label))) $submit_label="Submit";
			$element_name = "submit_$nid";
			$form[$element_name] = array(
				'#type' => 'submit',
				'#value' => t($submit_label),
			);
			/*
			 * establish the validate and submit functions to use
			 */
			$form['#validate'][] = 'fetchit_table_html_validate';
			$form['#submit'][] = 'fetchit_table_html_submit';
			break;
		case 3:
			$form['checkboxes'] = array('#type' => 'checkboxes','#options' => $options,'#default_value' => $default_values);
			/*
			 * add a submit button
			 */
			if (!strlen(trim($submit_label))) $submit_label="Delete";
			$element_name = "submit_$nid";
			$form[$element_name] = array(
				'#type' => 'submit',
				'#value' => t($submit_label),
			);
			/*
			 * establish the validate and submit functions to use
			 */
			$form['#validate'][] = 'fetchit_table_html_validate';
			$form['#submit'][] = 'fetchit_table_html_submit';
			break;
			default:
	}
	return $form;
}
/*
 * theme the html table form with checkboxes
 */
function theme_fetchit_table_html_form_builder($form) {
    //define table header
    //$fieldset_name = $form['fieldset_name']['#value'];
	$nid = $form['nid']['#value'];
	$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
	$field_count = $form['field_count']['#value'];
    $row_count = $form['row_count']['#value'];
	$header = array();
	switch ($record_select) {
		case 0:
			break;
		case 1:
			$header[] = 'Select:';
			break;
		case 2:
			$header[] = 'Select:';
			break;
		case 3:
			$header[] = 'Select:';
			break;
		default:
	}
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if($form['data'][0][$field_ndx]['#type'] == 'markup') {
			$header[] = $form['field_names'][$field_ndx]['#value'];
		}
	}
	switch ($record_select) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		default:
	}
	$rows = array();
	for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
		$row = array();
		switch ($record_select) {
			case 0:
				break;
			case 1:
				$row[] = drupal_render($form['radios'][$row_ndx+1]);
				break;
			case 2:
				$row[] = drupal_render($form['checkboxes'][$row_ndx+1]);
				break;
			case 3:
				$row[] = drupal_render($form['checkboxes'][$row_ndx+1]);
				break;
			default:
		}
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			if($form['data'][$row_ndx][$field_ndx]['#type'] == 'markup') {
				$row[] = drupal_render($form['data'][$row_ndx][$field_ndx]);
			}
		}
		$rows[] = $row;
	}
    $output .= theme('table', $header, $rows);
	$output .= drupal_render($form);
	return $output;
}
function fetchit_table_html_validate($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
	switch ($record_select) {
		case 0:
			form_set_error('submit',t("fetchit setup error: invalid table type $record_select.  please contact the site administrator."));
			return;
		case 1: //radio buttons
			if(!isset($form_state['values']['radios'])) {
				form_set_error('submit',t("Invalid selection: A selection is required before pressing the submit button."));
				return;
			}
			$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
			if (!strlen($record_select_table)) {
				form_set_error('submit',t('fetchit setup error: missing selection table name.  please contact the site administrator.'));
				return;
			}
			break;
		case 2: //checkboxes for record selection
			$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
			if (!strlen($record_select_table)) {
				form_set_error('submit',t('fetchit setup error: missing selection table name.  please contact the site administrator.'));
				return;
			}
			break;
		case 3: //checkboxes for record deletion
			break;
		default:
	}
	/*
	 * not sure, but for now this is not required
	 *
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	if (!strlen($user_uid_field)) {
		form_set_error('submit',t('fetchit setup error: missing drupal user id field name.  please contact the site administrator.'));
		return;
	}
	 */
	/*
	 * required for all cases (1,2,3)
	 */
	$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
	if (!strlen($key_field)) {
		form_set_error('submit',t('fetchit setup error: missing selection key field name.  please contact the site administrator.'));
		return;
	}
	$field_count = $form['field_count']['#value'];
	if (!($field_count)) {
		form_set_error('submit',t('fetchit setup error: selection table has no fields.  please contact the site administrator.'));
		return;
	}
	/*
	 * not sure, but for now this is not required
	 *
	$row_count = $form['row_count']['#value'];
	if (!($row_count)) {
		form_set_error('submit',t('fetchit setup error: selection table has no rows.  please contact the site administrator.'));
		return;
	}
	*/
}
function fetchit_table_html_submit($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
	//$record_select_table = trim(fetchit_get_cck_val(F_DR_RECORD_SELECT_TABLE_TBL,F_DR_RECORD_SELECT_TABLE_FLD,F_DR_NID_FLD,$nid));
	//$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	//$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
	$db_type = $form['db_type']['#value'];
	$db_handle = $form['db_handle']['#value'];
	//$field_count = $form['field_count']['#value'];
	//$row_count = $form['row_count']['#value'];
	switch ($record_select) {
		case 0:
			break;
		case 1:
			$key_field_ndx = $form['key_field_ndx']['#value'];
			if ($key_field_ndx) {
				$db_type = $form['db_type']['#value'];
				$db_handle = $form['db_handle']['#value'];
				$selected_radio_option = $form_state['values']['radios'];
				if ($selected_radio_option) {
					$key_field_val = $form['data'][$selected_radio_option-1][$key_field_ndx-1]['#value'];
					$result = fetchit_set_existing_selection_nid ($db_handle,$db_type,$nid,$key_field_val);
					drupal_set_message(t("Selection saved."),'status');
				} else {
					drupal_set_message(t("Selection not saved because no records were selected."),'warning');
				}
			} else {
				drupal_set_message(t("Warning: the selected records were NOT saved because a table key field was not detected.  Please contact the site administrator."),'warning');
			}
			break;
		case 2:
			$key_field_ndx = $form['key_field_ndx']['#value'];
			if ($key_field_ndx) {
				$db_type = $form['db_type']['#value'];
				$db_handle = $form['db_handle']['#value'];
				$selected_checkbox_options = array_filter($form_state['values']['checkboxes']);
				$key_field_vals = array();
				$saved_record_count = 0;
				foreach ($selected_checkbox_options as $selected_checkbox_option) {
					$key_field_vals[] = $form['data'][$selected_checkbox_option-1][$key_field_ndx-1]['#value'];
					$saved_record_count++;
				}
				$result = fetchit_set_existing_selection_nid ($db_handle,$db_type,$nid,$key_field_vals);
				if ($saved_record_count) {
					drupal_set_message(t("Selections ($saved_record_count) saved."),'status');
				} else {
					drupal_set_message(t("Warning: an empty selection list was saved."),'warning');
				}
			} else {
				drupal_set_message(t("Warning: the selected records were NOT saved because a table key field was not detected.  Please contact the site administrator."),'warning');
			}
			break;
		case 3:
			$key_field_ndx = $form['key_field_ndx']['#value'];
			if ($key_field_ndx) {
				$db_type = $form['db_type']['#value'];
				$db_handle = $form['db_handle']['#value'];
				$selected_checkbox_options = array_filter($form_state['values']['checkboxes']);
				$key_field_vals = array();
				$saved_record_count = 0;
				foreach ($selected_checkbox_options as $selected_checkbox_option) {
					$key_field_vals[] = $form['data'][$selected_checkbox_option-1][$key_field_ndx-1]['#value'];
					$saved_record_count++;
				}
				$result = fetchit_set_existing_selection_nid ($db_handle,$db_type,$nid,$key_field_vals);
				if ($saved_record_count) {
					drupal_set_message(t("Selections ($saved_record_count) deleted."),'status');
				} else {
					drupal_set_message(t("Warning: an empty selection list was deleted."),'warning');
				}
			} else {
				drupal_set_message(t("Warning: the selected records were NOT deleted because a table key field was not detected.  Please contact the site administrator."),'warning');
			}
			break;
		default:
	}
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	$postqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($postqry))) {
		if (strtolower(substr($postqry,0,4)) == 'php.') {
			$thefunction = substr($postqry,4); 
    		global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$postqry);
		}
	}
	$mytable = F_DR_REDIRECT_TBL;
	$myfield = F_DR_REDIRECT_FLD;
	$redirect = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($redirect))) {
		$form_state['redirect'] = $redirect; 
	}
}
/*
 * define the table edit form
 */
function fetchit_table_edit_form_builder(&$form_state,$form_id,$args) {
	/*
	 * redefine the arguments from the args array
	 * (&$form_state, $nid, $type) 
	 */
	$nid = $args[0];
	$form['nid'] = array('#type' => 'value','#value' => $nid);
	/*
	 * create the form fieldset
	 */
	/* BROKEN WHEN USING THEME FUNCTION...
	$fieldset_name = F_DR_HTML_BASENAME.$nid;
	$form['fieldset_name'] = array('#type' => 'value','#value' => $fieldset_name);
	$mytable = F_DR_CONTENT_TITLE_TBL;
	$myfield = F_DR_CONTENT_TITLE_FLD;
	$title = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_DESC_TBL;
	$myfield = F_DR_CONTENT_DESC_FLD;
	$desc = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSBL_TBL;
	$myfield = F_DR_CONTENT_CLLPSBL_FLD;
	$cllpsbl = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSD_TBL;
	$myfield = F_DR_CONTENT_CLLPSD_FLD;
	$cllpsd = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$form = array();
	$form[$fieldset_name] = array(
		'#title' => t($title),
		'#type' => 'fieldset',
		'#description' => t($desc),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	*/
	/*
	 * create the form content
	 * a simple pg table
	 * store all the data in the form
	 * and then use a theme function to render it
	 */
	if($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)) {
		$form['db_type'] = array('#type' => 'value','#value' => $db_type);
	} else {
		$err = 1;
		drupal_set_message("An error occurred when accessing the database type. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	if ($db_handle = fetchit_get_db_handle(&$err,$nid)) {
		$form['db_handle'] = array('#type' => 'value','#value' => $db_handle);
	} else {
		if ($err) drupal_set_message("An error occurred when creating the database connection. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	} 
	/*
	 * run the pre query before doing anything else 
	 */
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	$preqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($preqry))) {
		if (strtolower(substr($preqry,0,4)) == 'php.') {
			$thefunction = substr($preqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$preqry);
		}
	}
	/*
	 * get the table's data, then get the field count, field names and field types
	 * note that here we are just creating the form objects, not rendering them
	 * that will be done in the theme function
	 * however, note also that some data are stored in the form in NON RENDERABLE objects, such as value objects
	 * this makes it easy to pass parameters to the theme function
	 * also not that I tried to make it db agnostic at this level, though the underlying routines
	 * were initially working for pg only
	 */
	if(strlen(trim($view_name = fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid)))) {
		$form['view_name'] = array('#type' => 'value','#value' => $view_name);
	} else {
		$err=8;
		drupal_set_message("An error occurred when accessing the table/view name. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	$form['#theme'] = 'fetchit_table_edit_form_builder';
	$record_select = fetchit_get_cck_val(F_DR_RECORD_SELECT_TBL,F_DR_RECORD_SELECT_FLD,F_DR_NID_FLD,$nid);
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
	$submit_label = trim(fetchit_get_cck_val(F_DR_CONTENT_SUBMIT_LABEL_TBL,F_DR_CONTENT_SUBMIT_LABEL_FLD,F_DR_NID_FLD,$nid));
	$db_data_object = fetchit_get_data_object($err,$db_type,$db_handle,$view_name,$user_uid_field);
	$field_count = fetchit_get_field_count($err,$db_type,$db_data_object);
	$row_count = fetchit_get_row_count($err,$db_type,$db_data_object);
	$form['field_count'] = array('#type' => 'value','#value' => $field_count);
	$form['row_count'] = array('#type' => 'value','#value' => $row_count);
	$field_names = array();
	$field_names = fetchit_get_field_names($err,$db_type,$db_data_object);
	$field_types = array();
	$field_types = fetchit_get_field_types($err,$db_type,$db_data_object);
	/*
	 * figure out if we are adding a new row
	 */
	if ($row_count) {
		$itsarealrecord = TRUE;
	} else {
		$itsarealrecord = FALSE;
		if (fetchit_get_cck_val(F_DR_ADD_NEW_ROW_TBL,F_DR_ADD_NEW_ROW_FLD,F_DR_NID_FLD,$nid)) {
			$row_count = 1;
			$existdefaults = FALSE;
			if (strlen($defaults_table = trim(fetchit_get_cck_val(F_DR_CONTENT_DEFAULTS_TABLE_TBL,F_DR_CONTENT_DEFAULTS_TABLE_FLD,F_DR_NID_FLD,$nid)))) {
				/*
				 * note the assumption that the user id field in the defaults table is the same as in the data table
				 * and that we are appending only one record, so only one record of defaults is needed 
				 */
				$db_defaultdata_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$defaults_table,$user_uid_field);
				$default_row_count = fetchit_get_row_count($err,$db_type,$db_defaultdata_object);
				if ($default_row_count) $existdefaults = TRUE;
			}
		}
	}
	/*
	 * get the user entered field names and input methods
	 */
	$user_field_data = array();
	$user_field_data = fetchit_get_user_field_data($nid);
	/*
	 * decide whether to have a messy form or not :-) 
	 */
	$showtitles = fetchit_get_cck_val(F_DR_CONTENT_SHOWTITLES_TBL,F_DR_CONTENT_SHOWTITLES_FLD,F_DR_NID_FLD,$nid);
	$showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
	/*
	 * loop through the fields and rows in the table
	 * don't create visible form elements for user id fields or index fields,
	 * since those are not going to be editable by the user 
	 */
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if ( $field_names[$field_ndx] == $user_uid_field) {
			$form['uid_field_ndx'] = array('#type' => 'value','#value' => ($field_ndx+1) );
			$uid_field_now = TRUE; 
		} else {
			$uid_field_now = FALSE;
		}
		if ( $field_names[$field_ndx] == $key_field ) {
			$form['key_field_ndx'] = array('#type' => 'value','#value' => ($field_ndx+1) );
			$key_field_now = TRUE;
		} else {
			$key_field_now = FALSE;
		}
		$form['field_names'][$field_ndx] = array('#type' => 'value','#value' => $field_names[$field_ndx]);
		$form['field_types'][$field_ndx] = array('#type' => 'value','#value' => $field_types[$field_ndx]);
		for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
			//create the appropriate form element
			if ($uid_field_now) { //the drupal user id field
				if($itsarealrecord) {
					$db_value = fetchit_get_data($err,$db_type,$db_data_object,$row_ndx,$field_ndx);
					$form['uid_field'][$row_ndx] = array('#type' => 'value','#value' => $db_value);
				} else {
					global $user;
					$user_uid = $user->uid;
					$form['uid_field'][$row_ndx] = array('#type' => 'value','#value' => $user_uid);
				}
			} elseif ($key_field_now) { // the unique key field
				if($itsarealrecord) {
					$db_value = fetchit_get_data($err,$db_type,$db_data_object,$row_ndx,$field_ndx);
					$form['key_field'][$row_ndx] = array('#type' => 'value','#value' => $db_value);
				} else {
					$default_key = -999;
					$form['key_field'][$row_ndx] = array('#type' => 'value','#value' => $default_key);
				}
			} else { // something editable
				$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
				// get the user entered data for this field
				$user_field_ndx = 0;
				for ($i=0; $i<F_DR_GRID_FIELD_LIST_COUNT; $i++) {
					if ($user_field_data[$i][F_DR_FIELD_NAME_STR] == $field_names[$field_ndx]) $user_field_ndx = $i+1; 
				}
				if($itsarealrecord) {
					$db_value = fetchit_get_data($err,$db_type,$db_data_object,$row_ndx,$field_ndx);
				} else {
					if ($existdefaults) {
						$db_value = fetchit_get_data($err,$db_type,$db_defaultdata_object,0,$field_ndx);
					} else {
						$db_value = NULL;
					}
				}
				$form[$element_name] = fetchit_get_field_element_array(
											$field_names[$field_ndx],
											$field_types[$field_ndx],
											$db_handle,
											$user_field_ndx,
											$user_field_data,
											$nid,
											$showtitles,
											$db_value
										);
			}
		}
	}
	/*
	 * add a submit button
	 */
	if (!strlen(trim($submit_label))) $submit_label="Submit";
	$element_name = "submit_$nid";
	$form[$element_name] = array(
		'#type' => 'submit',
		'#value' => t($submit_label),
	);
	/*
	 * establish the validate and submit functions to use
	 */
	$form['#validate'][] = 'fetchit_table_edit_validate';
	$form['#submit'][] = 'fetchit_table_edit_submit';
	return $form;
}
/*
 * theme the table edit form
 */
function theme_fetchit_table_edit_form_builder($form) {
    //define table header
    //$fieldset_name = $form['fieldset_name']['#value'];
	$nid = $form['nid']['#value'];
	$field_count = $form['field_count']['#value'];
    $row_count = $form['row_count']['#value'];
    $showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
	$uid_field_ndx = $form['uid_field_ndx']['#value'];
	$key_field_ndx = $form['key_field_ndx']['#value'];
    $header = array();
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if ($field_ndx == ($uid_field_ndx-1)) {
			// do nothing
		} elseif ($field_ndx == ($key_field_ndx-1)) {
			// do nothing
		} else {
			if ($showheaders) {
				$header[] = $form['field_names'][$field_ndx]['#value'];
			} else {
				$header[] = "";
			}
		}
	}
	$rows = array();
	for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
		$row = array();
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			if ($field_ndx == ($uid_field_ndx-1)) {
				// do nothing
			} elseif ($field_ndx == ($key_field_ndx-1)) {
				// do nothing
			} else {
				$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
				$row[] = drupal_render($form[$element_name]);
			}
		}
		$rows[] = $row;
	}
    $output .= theme('table', $header, $rows);
    // render the rest of the form
	$output .= drupal_render($form);
	return $output;
}
function fetchit_table_edit_validate($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$field_count = $form['field_count']['#value'];
	if (!($field_count)) {
		form_set_error('submit',t('fetchit setup error: edit table has no fields.  please contact the site administrator.'));
		return;
	}
	$row_count = $form['row_count']['#value'];
	if (!($row_count)) {
		form_set_error('submit',t('fetchit setup error: edit table has no rows.  please contact the site administrator.'));
		return;
	}
}
function fetchit_table_edit_submit($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$uid_field_ndx = $form['uid_field_ndx']['#value'];
	$key_field = trim(fetchit_get_cck_val(F_DR_CONTENT_KEYFLD_TBL,F_DR_CONTENT_KEYFLD_FLD,F_DR_NID_FLD,$nid));
	$key_field_ndx = $form['key_field_ndx']['#value'];
	$db_type = $form['db_type']['#value'];
	$db_handle = $form['db_handle']['#value'];
	$table_name = $form['view_name']['#value'];
	$field_count = $form['field_count']['#value'];
	$row_count = $form['row_count']['#value'];
	//clear out the existing records
	$result = fetchit_remove_records($err,$db_handle,$db_type,$table_name,$user_uid_field);
	//add the new records
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if ($field_ndx) {
			$fld_names .= ",".$form['field_names'][$field_ndx]['#value'];
		} else {
			$fld_names = $form['field_names'][$field_ndx]['#value'];
		}
	} 
	for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
		$query = "INSERT INTO $table_name($fld_names) VALUES (";
		$val_str = "";
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
			if ($field_ndx) {
				$val_str .= ",";
			}
			if ($field_ndx == ($uid_field_ndx-1)) {
				global $user;
				$user_uid = $user->uid;
				$val_str .= fetchit_make_val_str($user_uid,"integer");
			} elseif ($field_ndx == ($key_field_ndx-1)) {
				$val_str .= fetchit_make_val_str($form['key_field'][$row_ndx]['#value'],"integer");
			} else {
				$control_type = $form[$element_name]['#type']; 
				$disabled = $form[$element_name]['#disabled']; 
				switch ($control_type) {
					case 'date': // the weird drupal core date element - an array of three values
						if ($disabled) {
							$tmp_val_str = $form[$element_name]['#default_value']['year'];
							$tmp_val_str .= "-";
							$tmp_val_str .= $form[$element_name]['#default_value']['month'];
							$tmp_val_str .= "-";
							$tmp_val_str .= $form[$element_name]['#default_value']['day'];
						} else {
							$tmp_val_str = $form_state['values'][$element_name]['year'];
							$tmp_val_str .= "-";
							$tmp_val_str .= $form_state['values'][$element_name]['month'];
							$tmp_val_str .= "-";
							$tmp_val_str .= $form_state['values'][$element_name]['day'];
						}
						break;
					default: //everything else until we get another that is not a string
						if ($disabled) {
							$tmp_val_str = $form[$element_name]['#default_value'];
						} else {
							$tmp_val_str = $form_state['values'][$element_name];
						}
				}
				$val_str .= fetchit_make_val_str($tmp_val_str,$form['field_types'][$field_ndx]['#value']);
			}
		}
		$query .= "$val_str)";
		//drupal_set_message($query);
		$result = fetchit_run_query($err,$db_type,$db_handle,$query);
	}
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	$postqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($postqry))) {
		if (strtolower(substr($postqry,0,4)) == 'php.') {
			$thefunction = substr($postqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$postqry);
		}
	}
	$mytable = F_DR_REDIRECT_TBL;
	$myfield = F_DR_REDIRECT_FLD;
	$redirect = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($redirect))) {
		$form_state['redirect'] = $redirect; 
	}
}
function fetchit_append_record_form_builder(&$form_state,$form_id,$args) {
	/*
	 * redefine the arguments from the args array
	 * (&$form_state, $nid, $type) 
	 */
	$nid = $args[0];
	$form['nid'] = array('#type' => 'value','#value' => $nid);
	/*
	 * create the form fieldset
	 */
	/* BROKEN WHEN USING THEME FUNCTION...
	$fieldset_name = F_DR_HTML_BASENAME.$nid;
	$form['fieldset_name'] = array('#type' => 'value','#value' => $fieldset_name);
	$mytable = F_DR_CONTENT_TITLE_TBL;
	$myfield = F_DR_CONTENT_TITLE_FLD;
	$title = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_DESC_TBL;
	$myfield = F_DR_CONTENT_DESC_FLD;
	$desc = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSBL_TBL;
	$myfield = F_DR_CONTENT_CLLPSBL_FLD;
	$cllpsbl = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSD_TBL;
	$myfield = F_DR_CONTENT_CLLPSD_FLD;
	$cllpsd = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$form = array();
	$form[$fieldset_name] = array(
		'#title' => t($title),
		'#type' => 'fieldset',
		'#description' => t($desc),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	*/
	/*
	 * create the form content
	 * a simple pg table
	 * store all the data in the form
	 * and then use a theme function to render it
	 */
	if($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)) {
		$form['db_type'] = array('#type' => 'value','#value' => $db_type);
	} else {
		$err = 1;
		drupal_set_message("An error occurred when accessing the database type. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	if ($db_handle = fetchit_get_db_handle(&$err,$nid)) {
		$form['db_handle'] = array('#type' => 'value','#value' => $db_handle);
	} else {
		if ($err) drupal_set_message("An error occurred when creating the database connection. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	} 
	/*
	 * run the pre query before doing anything else 
	 */
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	$preqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($preqry))) {
		if (strtolower(substr($preqry,0,4)) == 'php.') {
			$thefunction = substr($preqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$preqry);
		}
	}
	/*
	 * get one row of the table's data, then get the field count, field names and field types
	 * note that here we are just creating the form objects, not rendering them
	 * that will be done in the theme function
	 * however, note also that some data are stored in the form in NON RENDERABLE objects, such as value objects
	 * this makes it easy to pass parameters to the theme function
	 * also not that I tried to make it db agnostic at this level, though the underlying routines
	 * were initially working for pg only
	 */
	if(strlen(trim($view_name = fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid)))) {
		$form['view_name'] = array('#type' => 'value','#value' => $view_name);
	} else {
		$err=8;
		drupal_set_message("An error occurred when accessing the table/view name. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	$form['#theme'] = 'fetchit_append_record_form_builder';
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$submit_label = trim(fetchit_get_cck_val(F_DR_CONTENT_SUBMIT_LABEL_TBL,F_DR_CONTENT_SUBMIT_LABEL_FLD,F_DR_NID_FLD,$nid));
	$db_data_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$view_name,$user_uid_field);
	$field_count = fetchit_get_field_count($err,$db_type,$db_data_object);
	$form['field_count'] = array('#type' => 'value','#value' => $field_count);
	$field_names = array();
	$field_names = fetchit_get_field_names($err,$db_type,$db_data_object);
	$field_types = array();
	$field_types = fetchit_get_field_types($err,$db_type,$db_data_object);
	/*
	 * check for default values
	 */
	$existdefaults = FALSE;
	if (strlen($defaults_table = trim(fetchit_get_cck_val(F_DR_CONTENT_DEFAULTS_TABLE_TBL,F_DR_CONTENT_DEFAULTS_TABLE_FLD,F_DR_NID_FLD,$nid)))) {
		/*
		 * note the assumption that the user id field in the defaults table is the same as in the data table
		 * and that we are appending only one record, so only one record of defaults is needed 
		 */
		$db_defaultdata_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$defaults_table,$user_uid_field);
		$default_row_count = fetchit_get_row_count($err,$db_type,$db_defaultdata_object);
		if ($default_row_count) $existdefaults = TRUE;
	}
	/*
	 * get the user entered field names and input methods
	 */
	$user_field_data = array();
	$user_field_data = fetchit_get_user_field_data($nid);
	/*
	 * decide whether to have a messy form or not :-) 
	 */
	$showtitles = fetchit_get_cck_val(F_DR_CONTENT_SHOWTITLES_TBL,F_DR_CONTENT_SHOWTITLES_FLD,F_DR_NID_FLD,$nid);
	$showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
	/*
	 * loop through the fields and rows in the table
	 * don't create visible form elements for user id fields or index fields,
	 * since those are not going to be editable by the user 
	 */
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if ( $field_names[$field_ndx] == $user_uid_field) {
			$form['uid_field_ndx'] = array('#type' => 'value','#value' => ($field_ndx+1) );
			$uid_field_now = TRUE; 
		} else {
			$uid_field_now = FALSE;
		}
		$form['field_names'][$field_ndx] = array('#type' => 'value','#value' => $field_names[$field_ndx]);
		$form['field_types'][$field_ndx] = array('#type' => 'value','#value' => $field_types[$field_ndx]);
	    $row_ndx = 0;
		//create the appropriate form element
		if ($uid_field_now) { //the drupal user id field
			$form['uid_field'][$row_ndx] = array('#type' => 'value','#value' => $db_value);
		} else { // something editable
			$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
			// get the user entered data for this field
			$user_field_ndx = 0;
			for ($i=0; $i<F_DR_APPEND_FIELD_LIST_COUNT; $i++) {
				if ($user_field_data[$i][F_DR_FIELD_NAME_STR] == $field_names[$field_ndx]) $user_field_ndx = $i+1; 
			}
			if ($existdefaults) {
				$db_value = fetchit_get_data($err,$db_type,$db_defaultdata_object,0,$field_ndx);
			} else {
				$db_value = NULL;
			}
			$form[$element_name] = fetchit_get_field_element_array(
										$field_names[$field_ndx],
										$field_types[$field_ndx],
										$db_handle,
										$user_field_ndx,
										$user_field_data,
										$nid,
										$showtitles,
										$db_value
									);
		}
	}
	/*
	 * add a submit button
	 */
	if (!strlen(trim($submit_label))) $submit_label="Submit";
	$element_name = "submit_$nid";
	$form[$element_name] = array(
		'#type' => 'submit',
		'#value' => t($submit_label),
	);
	/*
	 * establish the validate and submit functions to use
	 */
	$form['#validate'][] = 'fetchit_append_record_validate';
	$form['#submit'][] = 'fetchit_append_record_submit';
	return $form;
}
/*
 * theme the append record form
 */
function theme_fetchit_append_record_form_builder($form) {
    //define table header
    //$fieldset_name = $form['fieldset_name']['#value'];
	$nid = $form['nid']['#value'];
	$showasrow = fetchit_get_cck_val(F_DR_CONTENT_APPEND_SHOWASROW_TBL,F_DR_CONTENT_APPEND_SHOWASROW_FLD,F_DR_NID_FLD,$nid);
	$showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
	$uid_field_ndx = $form['uid_field_ndx']['#value'];
	$field_count = $form['field_count']['#value'];
	if ($showasrow) {
		$row_count = 1;
		$header = array();
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			if ($field_ndx == ($uid_field_ndx-1)) {
				// do nothing
			} else {
				if ($showheaders) {
					$header[] = $form['field_names'][$field_ndx]['#value'];
				} else {
					$header[] = ""; 
				}
			}
		}
		$rows = array();
		for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
			$row = array();
			for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
				if ($field_ndx == ($uid_field_ndx-1)) {
					// do nothing
				} else {
					$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
					$row[] = drupal_render($form[$element_name]);
				}
			}
			$rows[] = $row;
		}
	    $output .= theme('table', $header, $rows);
	} else {
		$header = array();
		$header[] = "";
		$rows = array();
		$row_ndx = 0;
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			$row = array();
			if ($field_ndx == ($uid_field_ndx-1)) {
				// do nothing
			} else {
				$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
				if ($showheaders) {
					$row[] = $form['field_names'][$field_ndx]['#value'];
				}
				$row[] = drupal_render($form[$element_name]);
				$rows[] = $row;  
			}
		}
	    $output .= theme('table', $header, $rows);
	}
    // render the rest of the form
	$output .= drupal_render($form);
	return $output;
}
function fetchit_append_record_validate($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$field_count = $form['field_count']['#value'];
	if (!($field_count)) {
		form_set_error('submit',t('fetchit setup error: edit table has no fields.  please contact the site administrator.'));
		return;
	}
}
function fetchit_append_record_submit($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$uid_field_ndx = $form['uid_field_ndx']['#value'];
	$db_type = $form['db_type']['#value'];
	$db_handle = $form['db_handle']['#value'];
	$table_name = $form['view_name']['#value'];
	$field_count = $form['field_count']['#value'];
	$row_count = 1;
	//add the new record
	for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
		if ($field_ndx) {
			$fld_names .= ",".$form['field_names'][$field_ndx]['#value'];
		} else {
			$fld_names = $form['field_names'][$field_ndx]['#value'];
		}
	} 
	for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
		$query = "INSERT INTO $table_name($fld_names) VALUES (";
		$val_str = "";
		for ($field_ndx = 0; $field_ndx < $field_count; $field_ndx++) {
			$element_name = fetchit_make_element_name($nid,$row_ndx,$field_ndx);
			if ($field_ndx) {
				$val_str .= ",";
			}
			if ($field_ndx == ($uid_field_ndx-1)) {
				global $user;
				$user_uid = $user->uid;
				$val_str .= fetchit_make_val_str($user_uid,"integer");
			} else {
				$control_type = $form[$element_name]['#type']; 
				switch ($control_type) {
					case 'date': // the weird drupal core date element - an array of three values
						$tmp_val_str = $form_state['values'][$element_name]['year'];
						$tmp_val_str .= "-";
						$tmp_val_str .= $form_state['values'][$element_name]['month'];
						$tmp_val_str .= "-";
						$tmp_val_str .= $form_state['values'][$element_name]['day'];
						break;
					default: //everything else until we get another that is not a string
						$tmp_val_str = $form_state['values'][$element_name];
				}
				$val_str .= fetchit_make_val_str($tmp_val_str,$form['field_types'][$field_ndx]['#value']);
			}
		}
		$query .= "$val_str)";
		$result = fetchit_run_query($err,$db_type,$db_handle,$query);
	}
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	$postqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($postqry))) {
		if (strtolower(substr($postqry,0,4)) == 'php.') {
			$thefunction = substr($postqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$postqry);
		}
	}
	$mytable = F_DR_REDIRECT_TBL;
	$myfield = F_DR_REDIRECT_FLD;
	$redirect = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($redirect))) {
		$form_state['redirect'] = $redirect; 
	}
}

function fetchit_parameter_form_builder(&$form_state,$form_id,$args) {
	/*
	 * redefine the arguments from the args array
	 * (&$form_state, $nid, $type) 
	 */
	$nid = $args[0];
	$form['nid'] = array('#type' => 'value','#value' => $nid);
	/*
	 * create the form fieldset
	 */
	/* BROKEN WHEN USING THEME FUNCTION...
	$fieldset_name = F_DR_HTML_BASENAME.$nid;
	$form['fieldset_name'] = array('#type' => 'value','#value' => $fieldset_name);
	$mytable = F_DR_CONTENT_TITLE_TBL;
	$myfield = F_DR_CONTENT_TITLE_FLD;
	$title = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_DESC_TBL;
	$myfield = F_DR_CONTENT_DESC_FLD;
	$desc = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSBL_TBL;
	$myfield = F_DR_CONTENT_CLLPSBL_FLD;
	$cllpsbl = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_CLLPSD_TBL;
	$myfield = F_DR_CONTENT_CLLPSD_FLD;
	$cllpsd = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$form = array();
	$form[$fieldset_name] = array(
		'#title' => t($title),
		'#type' => 'fieldset',
		'#description' => t($desc),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	*/
	/*
	 * database type
	 */
	if($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)) {
		$form['db_type'] = array('#type' => 'value','#value' => $db_type);
	} else {
		$err = 1;
		drupal_set_message("An error occurred when accessing the database type. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	/*
	 * database handle
	 */
	if ($db_handle = fetchit_get_db_handle(&$err,$nid)) {
		$form['db_handle'] = array('#type' => 'value','#value' => $db_handle);
	} else {
		if ($err) drupal_set_message("An error occurred when creating the database connection. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	} 
	/*
	 * run the pre query before doing anything else 
	 */
	$mytable = F_DR_PREQRY_TBL;
	$myfield = F_DR_PREQRY_FLD;
	$preqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($preqry))) {
		if (strtolower(substr($preqry,0,4)) == 'php.') {
			$thefunction = substr($preqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$preqry);
		}
	}
	/*
	 * each of the field settings is now a potential parameter object
	 * 
	 * note that here we are just creating the form objects, not rendering them
	 * that will be done in the theme function
	 * however, note also that some data are stored in the form in NON RENDERABLE objects, such as value objects
	 * this makes it easy to pass parameters to the theme function
	 * also not that I tried to make it db agnostic at this level, though the underlying routines
	 * were initially working for pg only
	 */
	$form['#theme'] = 'fetchit_parameter_form_builder';
	/*
	 * get the user entered field names and input methods
	 * these are the parameters
	 */
	$user_field_data = array();
	$user_field_data = fetchit_get_user_field_data($nid);
	/*
	 * decide whether to have a messy form or not :-) 
	 */
	$showtitles = fetchit_get_cck_val(F_DR_CONTENT_SHOWTITLES_TBL,F_DR_CONTENT_SHOWTITLES_FLD,F_DR_NID_FLD,$nid);
	$submit_label = trim(fetchit_get_cck_val(F_DR_CONTENT_SUBMIT_LABEL_TBL,F_DR_CONTENT_SUBMIT_LABEL_FLD,F_DR_NID_FLD,$nid));
	/*
	 * loop through the user entered fields and make a table of parameter input controls
	 */
	$param_count = 0;
	for ($i=0; $i<F_DR_PARAM_FIELD_LIST_COUNT; $i++) {
		/* 
		 * loop through the user entered field name info
		 * when there are blank (unused) user entered field names, skip them
		 */
		if (strlen(trim($param_name = $user_field_data[$i][F_DR_FIELD_NAME_STR]))) {
			/*
			 * a field name was specified, so create a parameter element control
			 */
			// first - save some values into the form for use later
			$form['param_count'] = array('#type' => 'value','#value' => ($param_count+1));
			$form['param_indices'][$param_count] = array('#type' => 'value','#value' => $i);
			$form['param_names'][$param_count] = array('#type' => 'value','#value' => $param_name);
			/*
			 * param types are the field types of the "stored" (F_DR_DATA_TBL_NDX_FLD) field in the data tables where the parameter values are saved
			 * and probably (hopefully? required?) the same type as the stored values in the list tables if they are used  
			 * regardless, the control will be set-up to handle the data table field type
			 * and whatever value is gotten from the control will be formatted to fit into the data table field
			 * also, we ASSUME there is also a Drupal user_id field "drupal_userid" (F_DR_DATA_TBL_UID_FLD) in EVERY parameter data table
			 */
			$data_tbl = $user_field_data[$i][F_DR_FIELD_DATA_TBL_STR];
			$data_ndx = F_DR_DATA_TBL_NDX_FLD;
			$data_uid = F_DR_DATA_TBL_UID_FLD;
			if (strlen(trim($data_tbl))) { // if a data table is specified then we can continue building the parameter input control
				// save the data table name value into the form
				$form['param_data_table'][$param_count] = array('#type' => 'value','#value' => $data_tbl);
				$form['param_data_uid'][$param_count] = array('#type' => 'value','#value' => $data_uid);
				//just need field names and types, does not really matter which record we get
				$data_tbl_db_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$data_tbl,$data_uid);
				$data_tbl_field_names = fetchit_get_field_names($err,$db_type,$data_tbl_db_object);
				$data_tbl_field_types = fetchit_get_field_types($err,$db_type,$data_tbl_db_object);
				$j=0;
				//find the index field (named MUST BE F_DR_DATA_TBL_NDX_FLD) and get it's field type
				foreach ($data_tbl_field_names as $data_tbl_field_name) {
					if ($data_tbl_field_name == F_DR_DATA_TBL_NDX_FLD) {
						$data_tbl_field_type = $data_tbl_field_types[$j];
						break;
					}
					$j++;
				}
				if (strlen(trim($data_tbl_field_type))) {  // if we have a type, then an index field was found, and then we can continue building the parameter input control
					// save the data table index field type into the form
					$form['param_types'][$param_count] = array('#type' => 'value','#value' => $data_tbl_field_type);
					$row_ndx = 0;
					$fld_ndx = $param_count;
					$element_name = fetchit_make_element_name($nid,$row_ndx,$fld_ndx);
					/*
					 * set a default value to pass into the element generator
					 * this value is used unless the user specified a default value in the configuration
					 * get the last entered value from the selection table
					 * depending on the control type, this is either a single value or an array of values...
					 */
					switch ($user_field_data[$i][F_DR_FIELD_INPUT_TYPE_STR]) {
						case F_DR_CONTROL_CHECKBOXES:
						case F_DR_CONTROL_DROPDOWN_MULTI:
							$db_value = fetchit_get_existing_selection_multiple($db_handle,$db_type,$data_tbl,$data_ndx,$data_uid);
							break;
						case F_DR_CONTROL_DROPDOWN_SINGLE:
						case F_DR_CONTROL_RADIOBTN:
						case F_DR_CONTROL_TEXTBOX:
						case F_DR_CONTROL_CHECKBOX:
						case F_DR_CONTROL_DATESEL:
						case F_DR_CONTROL_DATETIMESEL:
						case F_DR_CONTROL_POPUPDATE:
							$db_value = fetchit_get_existing_selection_single($db_handle,$db_type,$data_tbl,$data_ndx,$data_uid);
							break;
						default:
					}
					/*
					 * the following creates the "renderable array" of a drupal form element
					 */
					$form[$element_name] = fetchit_get_field_element_array(
												$param_name,
												$data_tbl_field_type,
												$db_handle,
												$i+1,
												$user_field_data,
												$nid,
												$showtitles,
												$db_value
											);
					$param_count++;
				}
			}
		}
	}
	/*
	 * add a submit button
	 */
	if (!strlen(trim($submit_label))) $submit_label="Submit";
	$element_name = "submit_$nid";
	$form[$element_name] = array(
		'#type' => 'submit',
		'#value' => t($submit_label),
	);
	/*
	 * establish the validate and submit functions to use
	 */
	$form['#validate'][] = 'fetchit_parameter_validate';
	$form['#submit'][] = 'fetchit_parameter_submit';
	return $form;
}
/*
 * theme the parameter form
 */
function theme_fetchit_parameter_form_builder($form) {
	//define table header
    //$fieldset_name = $form['fieldset_name']['#value'];
	$param_count = $form['param_count']['#value'];
	if ($param_count) {
		$nid = $form['nid']['#value'];
		$showasrow = fetchit_get_cck_val(F_DR_CONTENT_APPEND_SHOWASROW_TBL,F_DR_CONTENT_APPEND_SHOWASROW_FLD,F_DR_NID_FLD,$nid);
		$showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
		if ($showasrow) {
			$header = array();
			for ($param_ndx = 0; $param_ndx < $param_count; $param_ndx++) {
				if ($showheaders) {
					$header[] = $form['param_names'][$param_ndx]['#value'];
				} else {
					$header[] = "";
				}
			}
			$rows = array();
			$row_count = 1;
			for ($row_ndx = 0; $row_ndx < $row_count; $row_ndx++) {
				$row = array();
				for ($param_ndx = 0; $param_ndx < $param_count; $param_ndx++) {
					$element_name = fetchit_make_element_name($nid,$row_ndx,$param_ndx);
					if($form[$element_name]['#type'] == 'value') {
						// do nothing
					} else {
						$row[] = drupal_render($form[$element_name]);
					}
				}
				$rows[] = $row;
			}
		    $output .= theme('table', $header, $rows);
		} else {
			$header = array();
			$header[] = "";
			$rows = array();
			$row_ndx = 0;
			for ($param_ndx = 0; $param_ndx < $param_count; $param_ndx++) {
				$row = array();
				$element_name = fetchit_make_element_name($nid,$row_ndx,$param_ndx);
				if($form[$element_name]['#type'] == 'value') {
					// do nothing
				} else {
					if ($showheaders) {
						$row[] = $form['param_names'][$param_ndx]['#value'];
					}
					$row[] = drupal_render($form[$element_name]);
					$rows[] = $row;  
				}
			}
		    $output .= theme('table', $header, $rows);
		}
	}
    // render the rest of the form
	$output .= drupal_render($form);
	return $output;
}
function fetchit_parameter_validate($form, &$form_state) {
}
function fetchit_parameter_submit($form, &$form_state) {
	$nid = $form['nid']['#value'];
	$db_type = $form['db_type']['#value'];
	$db_handle = $form['db_handle']['#value'];
	$param_count = $form['param_count']['#value'];
	for ($param_ndx = 0; $param_ndx < $param_count; $param_ndx++) {
		$param_data_table =	$form['param_data_table'][$param_ndx]['#value'];
		$param_data_uid =	$form['param_data_uid'][$param_ndx]['#value'];
		$param_type =		$form['param_types'][$param_ndx]['#value'];
		//clear out the existing records
		$result = fetchit_remove_records($err,$db_handle,$db_type,$param_data_table,$param_data_uid);
		//add the new record(s)
		$fld_names = F_DR_DATA_TBL_NDX_FLD;
		if (strlen(trim($param_data_uid))) {
			$fld_names .= ','.F_DR_DATA_TBL_UID_FLD;	
		}
		$query = "INSERT INTO $param_data_table($fld_names) VALUES (";
		/*
		 * here is the tricky part
		 * depending on what kind of control it is, there could be one or multiple or no values to store
		 */
		$row_ndx = 0;
		$element_name = fetchit_make_element_name($nid,$row_ndx,$param_ndx);
		$control_type = $form[$element_name]['#type'];
		switch ($control_type) {
			case 'date': // the weird drupal core date element - an array of three values
				$tmp_val_str = $form_state['values'][$element_name]['year'];
				$tmp_val_str .= "-";
				$tmp_val_str .= $form_state['values'][$element_name]['month'];
				$tmp_val_str .= "-";
				$tmp_val_str .= $form_state['values'][$element_name]['day'];
				$val_str = fetchit_make_val_str($tmp_val_str,$form['field_types'][$param_ndx]['#value']);
				if (strlen(trim($param_data_uid))) {
					global $user;
					$user_uid = $user->uid;
					$val_str .= ",".fetchit_make_val_str($user_uid,"integer");
				}
				$query .= "$val_str)";
				$result = fetchit_run_query($err,$db_type,$db_handle,$query);
				break;
			case 'select':
				$multiple = $form[$element_name]['#multiple'];
				if ($multiple) {
					$values = $form_state['values'][$element_name];
					foreach ($values as $value) {
						$val_str = fetchit_make_val_str($value,$param_type);
						if (strlen(trim($param_data_uid))) {
							global $user;
							$user_uid = $user->uid;
							$val_str .= ",".fetchit_make_val_str($user_uid,"integer");
						}
						$qry = $query.$val_str.")";
						$result = fetchit_run_query($err,$db_type,$db_handle,$qry);
					}
				} else {
					$value = $form_state['values'][$element_name];
					$val_str = fetchit_make_val_str($value,$param_type);
					if (strlen(trim($param_data_uid))) {
						global $user;
						$user_uid = $user->uid;
						$val_str .= ",".fetchit_make_val_str($user_uid,"integer");
					}
					$query .= "$val_str)";
					$result = fetchit_run_query($err,$db_type,$db_handle,$query);
				}
				break;
			case 'checkboxes':
				$values = array_filter($form_state['values'][$element_name]);
				foreach ($values as $value) {
					$val_str = fetchit_make_val_str($value,$param_type);
					if (strlen(trim($param_data_uid))) {
						global $user;
						$user_uid = $user->uid;
						$val_str .= ",".fetchit_make_val_str($user_uid,"integer");
					}
					$qry = $query.$val_str.")";
					$result = fetchit_run_query($err,$db_type,$db_handle,$qry);
				}
				break;
			default: //everything else until we get another that is not a string
				$tmp_val_str = $form_state['values'][$element_name];
				if (!strlen(trim($tmp_val_str))) break;
				$val_str = fetchit_make_val_str($tmp_val_str,$form['field_types'][$param_ndx]['#value']);
				if (strlen(trim($param_data_uid))) {
					global $user;
					$user_uid = $user->uid;
					$val_str .= ",".fetchit_make_val_str($user_uid,"integer");
				}
				$query .= "$val_str)";
				$result = fetchit_run_query($err,$db_type,$db_handle,$query);
		}
	}
	$mytable = F_DR_POSTQRY_TBL;
	$myfield = F_DR_POSTQRY_FLD;
	$postqry = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($postqry))) {
		if (strtolower(substr($postqry,0,4)) == 'php.') {
			$thefunction = substr($postqry,4); 
			global $user;
    		$user_uid = (int) $user->uid;
			$result = $thefunction($user_uid);
		} else {
			$result = fetchit_run_query($err,$db_type,$db_handle,$postqry);
		}
	}
	$mytable = F_DR_REDIRECT_TBL;
	$myfield = F_DR_REDIRECT_FLD;
	$redirect = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	if (strlen(trim($redirect))) {
		$form_state['redirect'] = $redirect; 
	}
}

function getFetchitErrorMsg ($err) {
	switch ($err) {
		case 0:
			return;
		case 1:
			return F_DR_CONTENT_ERR_1;
		default:
			return;
	}
}
/*
 * create an html table out of a pg database table object
 */
/*
 * Implementation of hook_theme(). 
 */
function fetchit_theme() {
	return array(
		'fetchit_table_html_form_builder' => array(
			'arguments' => array(),
		),
		'fetchit_table_edit_form_builder' => array(
			'arguments' => array(),
		),
		'fetchit_append_record_form_builder' => array(
			'arguments' => array(),
		),
		'fetchit_parameter_form_builder' => array(
			'arguments' => array(),
		),
		);
}
function pg_object_to_html_table($pg_object) {
	// create an array where each item will be a db table row object converted to an array
	$table_row_arrays = array();
	// load the array with with the table row arrays
	while ($row = pg_fetch_array($pg_object)) $table_row_arrays[] = $row;
	//if (count($table_row_arrays)) { // the table is not empty, create the html table
	// get the field names, but there are "two" many, fix it
	$too_many_field_names = array_keys($table_row_arrays[0]);
	$field_names=array();
	for ($i = 1; $i < count($too_many_field_names); $i += 2) {
		$field_names[]=$too_many_field_names[$i];
	}
	// create table rows array containing the table data
	$rows = array();
	foreach ($table_row_arrays as $key => $data) {
		$row = array();
		foreach ($field_names as $field_name) {
			$row[] = array(
				'data' => $data[$field_name],
				'class' => strtolower(str_replace(' ', '-', $field_name)),
			);
		}
		$rows[] = $row;
	}
	// create headers from field names
	$header = array();
	foreach ($field_names as $field_name) {
		$header[] = array(
			'data' => $field_name,
			'class' => strtolower(str_replace(' ', '-', $field_name)),
		);
	}
	// let drupal create and render a nice themed table for us!!
	return theme('table', $header, $rows);
}
/*
 * create an html table out of a pg database table object
 */
function mysql_object_to_html_table($mysql_object) {
	// create an array where each item will be a db table row object converted to an array
	$table_row_arrays = array();
	// load the array with with the table row arrays
	while ($row = db_fetch_array($mysql_object)) $table_row_arrays[] = $row;
	// get the field names
	$field_names = array_keys($table_row_arrays[0]);
	// create table rows array containing the table data
	$rows = array();
	foreach ($table_row_arrays as $key => $data) {
		$row = array();
		foreach ($field_names as $field_name) {
			$row[] = array(
				'data' => $data[$field_name],
				'class' => strtolower(str_replace(' ', '-', $field_name)),
			);
		}
		$rows[] = $row;
	}
	// create headers from field names
	$header = array();
	foreach ($field_names as $field_name) {
		$header[] = array(
			'data' => $field_name,
			'class' => strtolower(str_replace(' ', '-', $field_name)),
		);
	}
	// let drupal create and render a nice themed table for us!! 
	return theme('table', $header, $rows);
}
/*
 * create a generic default fetchit form
 */
function show_pgobject_info($result) {
	$rows = pg_num_rows($result);
	$fields = pg_num_fields($result);
	dpm("Number of rows in result set: $rows");
	dpm("Number of fields in result set: $fields");
	for ($i=0; $i < $fields; $i++) {
		dpm("Field $i : Name : ".pg_field_name($result,$i));
		dpm("Field $i : Type : ".pg_field_type($result,$i));
		dpm("Field $i : Type : ".pg_field_type($result,$i));
		dpm("Field $i : Size : ".pg_field_size($result,$i));
		dpm("Field $i : PrtLen : ".pg_field_prtlen($result,$i));
	}
}
function pg_object_to_append_record_form_builder(&$form_state,$form_id,$args) {
	return;
}
function fetchit_get_db_object(&$err,&$db_handle,&$db_query,&$nid) {
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		$err=1;
		return $db_object;
	}
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			if (!$db_object = pg_query($db_handle,$db_query)) $err=9;
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $db_object;
}
function fetchit_get_options_list(&$err,&$db_handle,&$list_tbl,&$list_uid,&$nid) {
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		$err=1;
		return $options;
	}
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$stored = F_DR_LIST_TBL_NDX_FLD;
			$displayed = F_DR_LIST_TBL_DSP_FLD;
			$db_query = "SELECT $stored,$displayed FROM $list_tbl";
			if ($list_uid) {
				global $user;
				$uid_field = F_DR_LIST_TBL_UID_FLD;
				$db_query .= " WHERE $uid_field = " .$user->uid; 
			} 
			if ($db_object = pg_query($db_handle,$db_query)) {
					$options = array();
					while ($row = pg_fetch_object($db_object)) {
						$options[$row->$stored]=$row->$displayed;
					}
			} else {
				$err=9;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $options;
}
function fetchit_get_field_count(&$err,&$db_type,&$data_object) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			if(!$field_count = pg_num_fields($data_object)) {
				$err=13;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $field_count;
}
function fetchit_get_row_count(&$err,&$db_type,&$data_object) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			if(!$row_count = pg_num_rows($data_object)) {
				$err=13;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $row_count;
}
function fetchit_get_field_names(&$err,&$db_type,&$data_object) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			if($field_count = pg_num_fields($data_object)) {
				$field_names = array();
				for ($j = 0; $j < $field_count; $j++) {
					$field_names[] = pg_field_name($data_object, $j);
				}
			} else {
				$err=13;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $field_names;
}
function fetchit_get_field_types(&$err,&$db_type,&$data_object) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			if($field_count = pg_num_fields($data_object)) {
				$field_types = array();
				for ($j = 0; $j < $field_count; $j++) {
					$field_types[] = pg_field_type($data_object, $j);
				}
			} else {
				$err=13;
			}
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $field_types;
}
function fetchit_get_data(&$err,&$db_type,&$data_object,$row,$field) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$data = pg_fetch_result($data_object,$row,$field);
			break;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $data;
}
function fetchit_get_data_object(&$err,&$db_type,&$db_handle,&$view_name,&$user_uid_field) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$query = "SELECT * FROM $view_name";
			if (strlen($user_uid_field)) {
				global $user;
				$user_uid = $user->uid;
				$query .= " WHERE $user_uid_field = ".$user_uid;
			}
			$data_object = pg_query($db_handle,$query);
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $data_object;
}
function fetchit_get_data_object_1(&$err,&$db_type,&$db_handle,&$view_name,&$user_uid_field) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$query = "SELECT * FROM $view_name";
			if (strlen($user_uid_field)) {
				global $user;
				$user_uid = $user->uid;
				$query .= " WHERE $user_uid_field = ".$user_uid;
			}
			$query .= " LIMIT 1";
			if (!$data_object = pg_query($db_handle,$query)) $err=9;
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $data_object;
}
function fetchit_get_user_field_data($nid) {
	$user_field_data=array();
	for ($i=1;$i<F_DR_USER_FIELD_LIST_COUNT+1;$i++) {
		$user_field_data[$i-1][F_DR_FIELD_NAME_STR]       = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_NAME_STR,      F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_NAME_STR.      F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_TITLE_STR]      = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_TITLE_STR,     F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_TITLE_STR.     F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_DESC_STR]       = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_DESC_STR,      F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_DESC_STR.      F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_INPUT_TYPE_STR] = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_INPUT_TYPE_STR,F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_INPUT_TYPE_STR.F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_LIST_TBL_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_LIST_TBL_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_LIST_TBL_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_LIST_UID_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_LIST_UID_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_LIST_UID_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_DATA_TBL_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_DATA_TBL_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_DATA_TBL_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_DEFAULT_STR]    = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_DEFAULT_STR,   F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_DEFAULT_STR.   F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_DISABLED_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_DISABLED_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_DISABLED_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_REQUIRED_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_REQUIRED_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_REQUIRED_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_VALIDATE_STR]   = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_VALIDATE_STR,  F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_VALIDATE_STR.  F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_SUBMIT_STR]     = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_SUBMIT_STR,    F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_SUBMIT_STR.    F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
		$user_field_data[$i-1][F_DR_FIELD_PARAMETER_STR]  = fetchit_get_cck_val(F_DR_FIELD_TBLNAME_PREFIX.$i."_".F_DR_FIELD_PARAMETER_STR, F_DR_FIELD_FLDNAME_PREFIX.$i."_".F_DR_FIELD_PARAMETER_STR. F_DR_FIELD_FLDNAME_SUFFIX,F_DR_NID_FLD,$nid);
	}
	return $user_field_data;
}
function fetchit_get_textbox_element(&$err,&$user_field_data,$user_field_ndx,$size,$showtitles,$db_value) {
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		/*
		 * put some random string as the default
		 */
		$default = "valid value required here";
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = $db_value;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]);
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'textfield',
		'#size' => $size,
		'#default_value' => $default,
		'#required' => $required,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_date_element(&$err,&$user_field_data,$user_field_ndx,$showtitles,$db_value) {
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		/*
		 * use the system date as a default
		 */
		$default = array(
			'month' => format_date(time(),'custom','n',0),
			'day' => format_date(time(),'custom','j',0),
			'year' => format_date(time(),'custom','Y',0),
		);
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = array(
			'month' => format_date(strtotime($db_value),'custom','n',0),
			'day' => format_date(strtotime($db_value),'custom','j',0),
			'year' => format_date(strtotime($db_value),'custom','Y',0),
		);
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$entered = trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]);
		dpm(strtotime($entered));
		$default = array(
			'month' => format_date(strtotime($entered),'custom','n',0),
			'day' => format_date(strtotime($entered),'custom','j',0),
			'year' => format_date(strtotime($entered),'custom','Y',0),
		);
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'date',
		'#required' => $required,
		'#default_value' => $default,
		'#disabled' => $disabled,
		//'#process' => array('expand_date_fetchit'),
		'#description' => $description,
	);
	return $form;
}
/**
 * Roll out a single date element.
 */
function expand_date_fetchit($element) {
	// Default to current date
  if (empty($element['#value'])) {
    $element['#value'] = array('day' => format_date(time(), 'custom', 'j'),
                            'month' => format_date(time(), 'custom', 'n'),
                            'year' => format_date(time(), 'custom', 'Y'));
  }

  $element['#tree'] = TRUE;

  // Determine the order of day, month, year in the site's chosen date format.
  $format = variable_get('date_format_short', 'm/d/Y - H:i');
  $sort = array();
  $sort['day'] = max(strpos($format, 'd'), strpos($format, 'j'));
  $sort['month'] = max(strpos($format, 'm'), strpos($format, 'M'));
  $sort['year'] = strpos($format, 'Y');
  asort($sort);
  $order = array_keys($sort);
  
  // Output multi-selector for date.
  foreach ($order as $type) {
    switch ($type) {
      case 'day':
        $options = drupal_map_assoc(range(1, 31));
        break;
      case 'month':
        $options = drupal_map_assoc(range(1, 12), 'map_month');
        break;
      case 'year':
        $options = drupal_map_assoc(range($minyear, $maxyear));
        break;
    }
    $parents = $element['#parents'];
    $parents[] = $type;
    $element[$type] = array(
      '#type' => 'select',
      '#value' => $element['#value'][$type],
      '#attributes' => $element['#attributes'],
      '#options' => $options,
    );
  }
}
function fetchit_get_date_select_element(&$err,&$user_field_data,$user_field_ndx,$date_format,$year_range,$showtitles,$db_value) {
	$default = format_date(time(),'custom','Y-m-d H:i:s');
	if (strlen(trim($db_value))) {
		$default = format_date(strtotime($db_value),'custom','Y-m-d H:i:s',0);
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = format_date(strtotime($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]),'custom','Y-m-d H:i:s',0);
	}
	if(!strlen(trim($date_format)))$date_format='Y-m-d g:i:s A';
	if(!strlen(trim($year_range)))$year_range='-15:+15';
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#type' => 'date_select',
		'#title' =>$title,
		'#default_value' => $default,
    	'#date_label_position' => 'none', //'none' 'within' 'above'
    	'#date_year_range' => $year_range, //'-3:+3'
		'#date_format' => $date_format, //'Y-m-d H:i' 'm-d-Y', 
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_date_popup_element(&$err,&$user_field_data,$user_field_ndx,$date_format,$year_range,$showtitles,$db_value) {
	$default = format_date(time(),'custom','Y-m-d H:i:s');
	if (strlen(trim($db_value))) {
		$default = format_date(strtotime($db_value),'custom','Y-m-d H:i:s',0);
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = format_date(strtotime($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]),'custom','Y-m-d H:i:s',0);
	}
	if(!strlen(trim($date_format)))$date_format='Y-m-d g:i:s A';
	if(!strlen(trim($year_range)))$year_range='-15:+15';
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'date_popup',
		'#default_value' => $default,
		'#date_format' => $date_format,
    	'#date_year_range' => $year_range, //'-3:+3'
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_select_element(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_value) {
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$options = array();
		foreach($vals as $val) {
			$options[$val]=$val;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			$options = array();
			if(!$options = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$err=14;
				return $form;
			}
		} else {
			$err=14;
			return $form;
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		/*
		 * choose the first item in the list as the default
		 */
		foreach($options as $key=>$val) {
			$default = $key;
			break;
		}
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = $db_value;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = $user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR];
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'select',
		'#options' => $options,
		'#multiple' => FALSE,
		'#required' => $required,
		'#default_value' => $default,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_select_element_bool(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_value) {
	$options = array();
	$options[0] = "false";
	$options[1] = "true";
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$i=0;
		foreach($vals as $val) {
			$options[$i]=$val;
			$i++;
			if($i>1)break;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			$options_tmp = array();
			if($options_tmp = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$i=0;
				foreach ($options_tmp as $key=>$val) {
					$options[$i]=$val;
					$i++;
					if($i>1)break;
				}
			}
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = fetchit_booleantointeger($db_value);
	} else {
		$default = 0;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = fetchit_booleantointeger(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]));
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'select',
		'#options' => $options,
		'#multiple' => FALSE,
		'#required' => $required,
		'#default_value' => $default,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_selectmultiple_element(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_values) {
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$options = array();
		foreach($vals as $val) {
			$options[$val]=$val;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			if(!$options = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$err=14;
				return $form;
			}
		} else {
			$err=14;
			return $form;
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		/*
		 * make sure there is atleast one selected by default if it is required
		 */
		foreach($options as $key=>$val) {
			$defaults = array($key);
			break;
		}
	} else {
		$defaults = array();
		$required = FALSE;
	}
	// over write defaults with the values they entered last time
	if ($db_values) {
		$defaults = array();
		foreach ($db_values as $db_value) {
			$defaults[] = $db_value;
		}
	}
	// finally over write defaults with preset values if they are in the configuration 
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$defaults = split(',',$user_field_data[$user_field_ndx-1][F_DR_FIELD_DEFAULT_STR]);
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'select',
		'#options' => $options,
		'#multiple' => TRUE,
		'#required' => $required,
		'#default_value' => $defaults,
		'#attributes' => array('size'=>5),
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_checkboxes_element(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_values) {
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$options = array();
		foreach($vals as $val) {
			$options[$val]=$val;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			if(!$options = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$err=14;
				return $form;
			}
		} else {
			$err=14;
			return $form;
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		foreach($options as $key=>$val) { // set defaults array to the first value in the list
			$defaults = array($key);
			break;
		}
	} else {
		$defaults = array();
		$required = FALSE;
	}
	// over write defaults with the values they entered last time
	if ($db_values) {
		$defaults = array();
		foreach ($db_values as $db_value) {
			$defaults[] = $db_value;
		}
	}
	// finally over write defaults with user entered values if they put anything 
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$defaults = split(',',$user_field_data[$user_field_ndx-1][F_DR_FIELD_DEFAULT_STR]);
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'checkboxes',
		'#options' => $options,
		'#required' => $required,
		'#default_value' => $defaults,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_checkbox_element_bool(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_value) {
	$options = array();
	$options[0] = "false";
	$options[1] = "true";
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$i=0;
		foreach($vals as $val) {
			$options[$i]=$val;
			$i++;
			if($i>1)break;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			$options_tmp = array();
			if($options_tmp = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$i=0;
				foreach ($options_tmp as $key=>$val) {
					$options[$i]=$val;
					$i++;
					if($i>1)break;
				}
			} 
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = fetchit_booleantointeger($db_value);
	} else {
		$default = 0;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = fetchit_booleantointeger(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]));
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'checkbox',
		'#required' => $required,
		'#default_value' => $default,
		'#return_value' => 1,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_radios_element(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_value) {
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$options = array();
		foreach($vals as $val) {
			$options[$val]=$val;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			if(!$options = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$err=14;
				return $form;
			}
		} else {
			$err=14;
			return $form;
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
		foreach($options as $key=>$val) {
			$default = $key;
			break;
		}
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = $db_value;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = $user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR];
	}
	/*
	 * now see if the control is enabled or disabled
	 */
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' =>$title,
		'#type' => 'radios',
		'#options' => $options,
		'#required' => $required,
		'#default_value' => $default,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_get_radios_element_bool(&$err,&$user_field_data,$user_field_ndx,$db_handle,$nid,$showtitles,$db_value) {
	$options = array();
	$options[0] = "false";
	$options[1] = "true";
	if (substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],0,1)==F_DR_LIST_TBL_SPECIAL_CHAR) {
		$vals = split(",",substr($user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR],1));
		$i=0;
		foreach($vals as $val) {
			$options[$i]=$val;
			$i++;
			if($i>1)break;
		}
	} else {
		$list_tbl = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_TBL_STR];
		if(strlen(trim($list_tbl))) {
			$list_uid = $user_field_data[$user_field_ndx][F_DR_FIELD_LIST_UID_STR];
			$options_tmp = array();
			if($options_tmp = fetchit_get_options_list($err,$db_handle,$list_tbl,$list_uid,$nid)) {
				$i=0;
				foreach ($options_tmp as $key=>$val) {
					$options[$i]=$val;
					$i++;
					if($i>1)break;
				}
			}
		}
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_REQUIRED_STR]) {
		$required = TRUE;
	} else {
		$required = FALSE;
	}
	if (strlen(trim($db_value))) {
		$default = fetchit_booleantointeger($db_value);
	} else {
		$default = 0;
	}
	if (strlen(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]))) {
		$default = fetchit_booleantointeger(trim($user_field_data[$user_field_ndx][F_DR_FIELD_DEFAULT_STR]));
	}
	if ($user_field_data[$user_field_ndx][F_DR_FIELD_DISABLED_STR]) {
		$disabled = TRUE;
	} else {
		$disabled = FALSE;
	}
	if ($showtitles) {
		$title=t($user_field_data[$user_field_ndx][F_DR_FIELD_TITLE_STR]);
		$description=t($user_field_data[$user_field_ndx][F_DR_FIELD_DESC_STR]);
	}
	$form = array(
		'#title' => $title,
		'#type' => 'radios',
		'#options' => $options,
		'#required' => $required,
		'#default_value' => $default,
		'#disabled' => $disabled,
		'#description' => $description,
	);
	return $form;
}
function fetchit_booleantointeger($val) {
	switch (strtolower($val)) {
	case "t":
	case "true":
	case "yes":
	case "1":
	case "on":
		return 1;
	case "f":
	case "false":
	case "no":
	case "0":
	case "off":
		return 0;
	}
	switch ($val) {
	case 0:
		return 0;
	default:
		return 1;
	}
}
//function fetchit_get_field_element (&$form_state,$element_name,$field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value,$element_controltype_name) {
function fetchit_get_field_element (&$form_state,$element_name,$field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value) {
	//$form[$element_name] = fetchit_get_field_element_array($field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value,$element_controltype_name);
	$form[$element_name] = fetchit_get_field_element_array($field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value);
	return $form; 
	//return fetchit_get_field_element_array ($element_name,$field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value,$element_controltype_name);
}
function fetchit_parse_parameter_string($parameter_name,$parameter_string) {
	// make the list
	$paramlist = array();
	$paramlist = explode(";",$parameter_string);
	$param = array();
	foreach ($paramlist as $paramstr) {
		$tmp = array();
		$tmp = explode(':',$paramstr);
		$param[$tmp[0]] = $tmp[1];
	}
	// search the list
	$val_found = '';
	foreach ($param as $key=>$val) {
		if ($key == $parameter_name) {
			$val_found = $val;
		}
	}
	return $val_found;
}
//function fetchit_get_field_element_array ($field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value,$element_controltype_name) {
function fetchit_get_field_element_array ($field_name,$field_type,$db_handle,$user_field_ndx,$user_field_data,$nid,$showtitles,$db_value) {
	switch (strtolower(trim($field_type))) {
		case 'bool': // a boolean from a pg database
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DROPDOWN_SINGLE:
						$output = fetchit_get_select_element_bool($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_RADIOBTN:
						$output = fetchit_get_radios_element_bool($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 7;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOX:
						$output = fetchit_get_checkbox_element_bool($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOXES:
					case F_DR_CONTROL_DROPDOWN_MULTI:
					case F_DR_CONTROL_DATESEL:
					case F_DR_CONTROL_DATETIMESEL:
					case F_DR_CONTROL_POPUPDATE:
						$err=15;
						break;
					default:
						$output = fetchit_get_checkbox_element_bool($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
				}
			} else { // create the default input control element for booleans - a single check box
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				if (strlen(trim($db_value))) {
					$default = fetchit_booleantointeger($db_value);
				}
				$output = array(
					'#type' => 'checkbox',
					'#title' => $title,
					'#description' => $description,
					'#default_value' => $default,
					'#return_value' => 1,
					'#disabled' => FALSE,
					'#required' => FALSE,
				);
			}
			break;
		case 'int2': // a small integer from a pg database
		case 'int4': // an integer from a pg database
		case 'int8': // a long integer from a pg database
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DROPDOWN_SINGLE:
						$output = fetchit_get_select_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_RADIOBTN:
						$output = fetchit_get_radios_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 7;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOXES:
						$output = fetchit_get_checkboxes_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_MULTI:
						$output = fetchit_get_selectmultiple_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_DATETIMESEL:
					case F_DR_CONTROL_POPUPDATE:
					case F_DR_CONTROL_DATESEL:
					default:
						$err=15;
				}
			} else { // create the default input control element for integers - a text box
				$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
				$size_string = fetchit_parse_parameter_string('size',$parameter_string);
				if (strlen(trim($size_string))) {
					$size = (int) $size_string;
				} else {
					$size = 7;
				}
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				if (strlen(trim($db_value))) {
					$default = (int) $db_value;
				}
				$output = array(
					'#type' => 'textfield',
					'#title' => $title,
					'#description' => $description,
					'#default_value' => $default,
					'#size' => $size,
					'#required' => FALSE,
					'#disabled' => FALSE,
				);
			}
			break;
		case 'numeric': // a "numeric" real number field from a pg database
		case 'float4': // a single precision real number field from a pg database
		case 'float8': // a double precision real number field from a pg database
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DROPDOWN_SINGLE:
						$output = fetchit_get_select_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_RADIOBTN:
						$output = fetchit_get_radios_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 9;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOXES:
						$output = fetchit_get_checkboxes_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_MULTI:
						$output = fetchit_get_selectmultiple_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_DATETIMESEL:
					case F_DR_CONTROL_POPUPDATE:
					case F_DR_CONTROL_DATESEL:
					default:
						$err=15;
				}
			} else { // create the default input control element for reals - a text box
				$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
				$size_string = fetchit_parse_parameter_string('size',$parameter_string);
				if (strlen(trim($size_string))) {
					$size = (int) $size_string;
				} else {
					$size = 9;
				}
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				$default = $db_value;
				$output = array(
					'#type' => 'textfield',
					'#title' => $title,
					'#description' => $description,
					'#default_value' => $default,
					'#size' => $size,
					'#required' => FALSE,
					'#disabled' => FALSE,
				);
			}
			break;
		case 'date': // a date field from a pg database
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DATESEL:
						$output = fetchit_get_date_element($err,$user_field_data,$user_field_ndx-1,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DATETIMESEL:
						$date_format='M j, Y';
						$year_range='-15:+15';
						$output = fetchit_get_date_select_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_POPUPDATE:
						$date_format='M j, Y';
						$year_range='-15:+15';
						$output = fetchit_get_date_popup_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 20;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_SINGLE:
					case F_DR_CONTROL_DROPDOWN_MULTI:
					case F_DR_CONTROL_RADIOBTN:
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_CHECKBOXES:
					default:
						$err=15;
				}
			} else { // the default input control element for dates - the drupal 6 core date element
				$default = array(
					'month' => format_date(time(),'custom','n',0),
					'day' => format_date(time(),'custom','j',0),
					'year' => format_date(time(),'custom','Y',0),
				);
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				if (strlen(trim($db_value))) {
					$default = array(
						'month' => format_date(strtotime($db_value),'custom','n',0),
						'day' => format_date(strtotime($db_value),'custom','j',0),
						'year' => format_date(strtotime($db_value),'custom','Y',0),
					);
				}
				$output = array(
					'#type' => 'date', // this is the drupal 6 core date element, default is today's date, returns an associative array with 'year' 'month' and 'day' elements
					'#title' => $title,
					'#description' => $description,
					'#required' => FALSE,
					'#disabled' => FALSE,
					'#default_value' => $default,
				);
			}
			break;
		case 'time': // a time field from a pg database
		case 'timetz': // a time field with timezone from a pg database
			if ($user_field_ndx) {
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DATETIMESEL:
						$date_format='g:i A';
						$year_range='-15:+15';
						$output = fetchit_get_date_select_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_POPUPDATE:
						$date_format='g:i A';
						$year_range='-15:+15';
						$output = fetchit_get_date_popup_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						case F_DR_CONTROL_DATESEL:
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 20;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_SINGLE:
					case F_DR_CONTROL_DROPDOWN_MULTI:
					case F_DR_CONTROL_RADIOBTN:
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_CHECKBOXES:
					default:
						$err=15;
				}
			} else { // the default input control element for times - the drupal 6 date module api element, date_select formatted to only show hours and minutes 
				$default = format_date(time(),'custom','Y-m-d H:i:s');
				$date_format = 'g:i A';
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				if (strlen(trim($db_value))) {
					$default = format_date(strtotime($db_value),'custom','Y-m-d H:i:s',0);
				}
				$output = array(
					'#type' => 'date_select',
					'#title' => $title,
					'#description' => $description,
					'#date_format' => $date_format,
					'#default_value' => $default,
    				'#date_label_position' => 'none', //'none' 'within' 'above'
				);
			}
			break;
		case 'timestamp': // a timestamp field from a pg database
		case 'timestamptz': // a timestamp field with timezone from a pg database
			if ($user_field_ndx) {
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DATETIMESEL:
						$date_format='M j, Y g:i A';
						$year_range='-15:+15';
						$output = fetchit_get_date_select_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_POPUPDATE:
						$date_format='M j, Y g:i A';
						$year_range='-15:+15';
						$output = fetchit_get_date_popup_element($err,$user_field_data,$user_field_ndx-1,$date_format,$year_range,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 20;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DATESEL:
					case F_DR_CONTROL_DROPDOWN_SINGLE:
					case F_DR_CONTROL_DROPDOWN_MULTI:
					case F_DR_CONTROL_RADIOBTN:
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_CHECKBOXES:
					default:
						$err=15;
				}
			} else { // the default input control element for timestamps - the drupal 6 date module api element, date_select formatted to show months, days, years, hours and minutes
				$date_format = 'M j, Y g:i A';
				$default = format_date(time(),'custom','Y-m-d H:i:s');
				$year_range='-15:+15';
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				if (strlen(trim($db_value))) {
					$default = format_date(strtotime($db_value),'custom','Y-m-d H:i:s',0);
				}
				$output = array(
					'#type' => 'date_select',
					'#title' => $title,
					'#description' => $description,
					'#date_format' => $date_format,
    				'#date_label_position' => 'none', //'none' 'within' 'above'
    				'#date_year_range' => $year_range,
					'#default_value' => $default,
				);
			}
			break;
		case 'text':  // a text field from a pg database
		case 'varchar': // a varchar field from a pg database
		case 'bpchar': // a bpchar field from a pg database
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_DROPDOWN_SINGLE:
						$output = fetchit_get_select_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_RADIOBTN:
						$output = fetchit_get_radios_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 20;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOXES:
						$output = fetchit_get_checkboxes_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_MULTI:
						$output = fetchit_get_selectmultiple_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_DATESEL:
					case F_DR_CONTROL_DATETIMESEL:
					case F_DR_CONTROL_POPUPDATE:
					default:
						$err=15;
				}
			} else { // the default input control element for text fields - a text box
				$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
				$size_string = fetchit_parse_parameter_string('size',$parameter_string);
				if (strlen(trim($size_string))) {
					$size = (int) $size_string;
				} else {
					$size = 20;
				}
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				$default = $db_value;
				$output = array(
					'#type' => 'textfield',
					'#title' => $title,
					'#description' => $description,
					'#default_value' => $default,
					'#size' => $size,
					'#required' => FALSE,
					'#disabled' => FALSE,
				);
			}
			break;
		default: // an unanticipated field type, put a text box or single selects, but may not work
			if ($user_field_ndx) { // the user specified something
				switch ($user_field_data[$user_field_ndx-1][F_DR_FIELD_INPUT_TYPE_STR]) {
					case F_DR_CONTROL_TEXTBOX:
						$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
						$size_string = fetchit_parse_parameter_string('size',$parameter_string);
						if (strlen(trim($size_string))) {
							$size = (int) $size_string;
						} else {
							$size = 20;
						}
						$output = fetchit_get_textbox_element($err,$user_field_data,$user_field_ndx-1,$size,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_DROPDOWN_SINGLE:
						$output = fetchit_get_select_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_RADIOBTN:
						$output = fetchit_get_radios_element($err,$user_field_data,$user_field_ndx-1,$db_handle,$nid,$showtitles,$db_value);
						break;
					case F_DR_CONTROL_CHECKBOXES:
					case F_DR_CONTROL_CHECKBOX:
					case F_DR_CONTROL_DROPDOWN_MULTI:
					case F_DR_CONTROL_DATESEL:
					default:
						$err=15;
				}
			} else { // try a text box for this unanticipated field foeld
				$parameter_string = $user_field_data[$user_field_ndx-1][F_DR_FIELD_PARAMETER_STR];
				$size_string = fetchit_parse_parameter_string('size',$parameter_string);
				if (strlen(trim($size_string))) {
					$size = (int) $size_string;
				} else {
					$size = 40;
				}
				if ($showtitles) {
					$title=$field_name;
					$description=$field_type;
				}
				$default = $db_value;
				$output = array(
					'#type' => 'textfield',
					'#title' => $title,
					'#description' => $description,
					'#size' => $size,
					'#default_value' => $default,
					'#required' => FALSE,
					'#disabled' => FALSE,
				);
			}
	}
	return $output;
}
/*
 * this is the generic append new record form builder, used by form hooks
 * convert a db object into a append new record form
 */
function fetchit_append_record_form_builderXXX(&$form_state,$form_id,$args) {
	/*
	 * redefine the arguments from the args array
	 * (&$form_state, $nid, $type)
	 */
	$nid = $args[0];
	/*
	 * create the form fieldset
	 */
	/*
	$fieldset_name = F_DR_APPEND_BASENAME.$nid;
	$mytable = F_DR_CONTENT_TITLE_TBL;
	$myfield = F_DR_CONTENT_TITLE_FLD;
	$title = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$mytable = F_DR_CONTENT_DESC_TBL;
	$myfield = F_DR_CONTENT_DESC_FLD;
	$desc = fetchit_get_cck_val($mytable,$myfield,F_DR_NID_FLD,$nid);
	$form = array();
	$form[$fieldset_name] = array(
		'#title' => t($title),
		'#type' => 'fieldset',
		'#description' => t($desc),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	$form[$fieldset_name][F_DR_FORM_ELE_DEF] = array(
		'#type' => 'markup',
		'#value' => F_DR_FORM_ERROR_DEF,
	);
	*/
	/*
	 * create the form content - a sequence of form elements one per field 
	 */
	$err = 0;
	/*
	 * get the database connection handle
	 * will be calling it multiple times because of how pg works
	 * (field type calls require the connection to stay open)
	 */
	if (!$db_handle = fetchit_get_db_handle(&$err,$nid)) {
		if ($err) drupal_set_message("An error occurred when creating the database connection. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	} 
	/*
	 * get the table's field count, field names and field types
	 */
	if(!strlen(trim($view_name = fetchit_get_cck_val(F_DR_CONTENT_VIEW_TBL,F_DR_CONTENT_VIEW_FLD,F_DR_NID_FLD,$nid)))) {
		$err=8;
		drupal_set_message("An error occurred when accessing the table/view name. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	if(!strlen(trim($db_type = fetchit_get_cck_val(F_DR_DB_TYPE_TBL,F_DR_DB_TYPE_FLD,F_DR_NID_FLD,$nid)))) {
		$err=1;
		drupal_set_message("An error occurred when accessing the database type. Error number $err :".getFetchitErrorMsg($err));
		return $form;
	}
	$user_uid_field = "";
	$db_data_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$view_name,$user_uid_field);
	$field_count = fetchit_get_field_count($err,$db_type,$db_data_object);
	$field_names = array();
	$field_names = fetchit_get_field_names($err,$db_type,$db_data_object);
	$field_types = array();
	$field_types = fetchit_get_field_types($err,$db_type,$db_data_object);
	/*
	 * get the user entered field names and input methods
	 */
	$user_field_data = array();
	$user_field_data = fetchit_get_user_field_data($nid);
	/*
	 * create a sequence of controls (text input boxes, etc) for the fields in the table being appended to 
	 */
	$element_base = 'fetchit_element_'.$nid.'_';
	$user_uid_field = trim(fetchit_get_cck_val(F_DR_CONTENT_UID_TBL,F_DR_CONTENT_UID_FLD,F_DR_NID_FLD,$nid));
	$showasrow = fetchit_get_cck_val(F_DR_CONTENT_APPEND_SHOWASROW_TBL,F_DR_CONTENT_APPEND_SHOWASROW_FLD,F_DR_NID_FLD,$nid);
	$showtitles = fetchit_get_cck_val(F_DR_CONTENT_SHOWTITLES_TBL,F_DR_CONTENT_SHOWTITLES_FLD,F_DR_NID_FLD,$nid);
	$showheaders = fetchit_get_cck_val(F_DR_CONTENT_SHOWHEADERS_TBL,F_DR_CONTENT_SHOWHEADERS_FLD,F_DR_NID_FLD,$nid);
	$existdefaults = FALSE;
	if (strlen($defaults_table = trim(fetchit_get_cck_val(F_DR_CONTENT_DEFAULTS_TABLE_TBL,F_DR_CONTENT_DEFAULTS_TABLE_FLD,F_DR_NID_FLD,$nid)))) {
		/*
		 * note the assumption that the user id field in the defaults table is the same as in the data table
		 * and that we are appending only one record, so only one record of defaults is needed 
		 */
		$db_defaultdata_object = fetchit_get_data_object_1($err,$db_type,$db_handle,$defaults_table,$user_uid_field);
		$default_row_count = fetchit_get_row_count($err,$db_type,$db_defaultdata_object);
		if ($default_row_count) $existdefaults = TRUE;
	}
	/*
	 * loop through the fields in the table,
	 * comparing to the user entered fields and using that data if it matches,
	 * otherwise using default input controls,
	 * and, of course, skipping the UID field if it is specified (and it almost certainly should be)
	 */
	$headers = array();
	$rows = array();
	$row = array();
	for ($j = 0; $j < $field_count; $j++) {
		$element_name = fetchit_make_element_name($nid,0,$j);
		$element_controltype_name = fetchit_make_element_controltype_name($nid,0,$j);
		if (!$field_names[$j]==$user_uid_field) {
			$ndx=0;
			for ($i=0; $i<F_DR_APPEND_FIELD_LIST_COUNT; $i++) {
				if ($user_field_data[$i][F_DR_FIELD_NAME_STR]==$field_names[$j]) $ndx=$i+1; 
			}
			if ($existdefaults) {
				$db_value = fetchit_get_data($err,$db_type,$db_defaultdata_object,0,$j);
			} else {
				$db_value = NULL;
			}
			//if ($element = drupal_get_form('fetchit_get_field_element',$element_name,$field_names[$j],$field_types[$j],$db_handle,$ndx,$user_field_data,$nid,$showtitles,$db_value,$element_controltype_name)) {
			if ($element = drupal_get_form('fetchit_get_field_element',$element_name,$field_names[$j],$field_types[$j],$db_handle,$ndx,$user_field_data,$nid,$showtitles,$db_value)) {
				if ($showasrow) {
					if ($showheaders) {
						if ($ndx) {
							$headers[] = $user_field_data[$ndx-1][F_DR_FIELD_TITLE_STR];
						} else {
							$headers[] = $field_names[$j];
						}
					}
					$row[] = $element;
				} else {
					$rows[] = array($element);
				}
			} else {
				$err=15;
				drupal_set_message("An error occurred when accessing field $j of the table. Error number $err :".getFetchitErrorMsg($err));
				return $form;
			}
		}
	}
	if ($showasrow) {
		$rows[] = $row;
		$form[$fieldset_name][F_DR_FORM_ELE_DEF] = array(
			'#type' => 'markup',
			'#value' => theme('table',$headers,$rows),
		);
	} else {
		$form[$fieldset_name][F_DR_FORM_ELE_DEF] = array(
			'#type' => 'markup',
			'#value' => theme('table',array(),$rows),
		);
	}
	/*
	 * add a submit button
	 */
	$submit_label = fetchit_get_cck_val(F_DR_CONTENT_SUBMIT_LABEL_TBL,F_DR_CONTENT_SUBMIT_LABEL_FLD,F_DR_NID_FLD,$nid);
	if (!strlen(trim($submit_label))) $submit_label="Append New Record";
	$element_name = $element_base.'submit';
	$form[$fieldset_name][$element_name] = array(
		'#type' => 'submit',
		'#value' => t($submit_label),
	);
	/*
	 * establish the validate and submit functions to use
	 */
	$postqry = fetchit_get_cck_val(F_DR_POSTQRY_TBL,F_DR_POSTQRY_FLD,F_DR_NID_FLD,$nid);
	$form['#validate'][] = 'fetchit_append_record_form_validate';
	$form['#submit'][] = 'fetchit_append_record_form_submit';
	/*
	 * create some form elements for saving values needed in the validation and submit functions
	 */
	$form['fieldset_name'] = array(
		'#type' => 'value',
		'#value' => $fieldset_name,
	);
	$form['element_base'] = array(
		'#type' => 'value',
		'#value' => $element_base,
	);
	$form['db_handle'] = array(
		'#type' => 'value',
		'#value' => $db_handle,
	);
	$form['db_table'] = array(
		'#type' => 'value',
		'#value' => $db_table,
	);
	$form['db_field_count'] = array(
		'#type' => 'value',
		'#value' => $field_count,
	);
	$form['db_field_list'] = array(
		'#type' => 'value',
		'#value' => $field_list_string,
	);
	$form['db_field_types'] = array(
		'#type' => 'value',
		'#value' => $field_types,
	);
	$form['nid'] = array(
		'#type' => 'value',
		'#value' => $nid,
	);
	$form['success_msg'] = array(
		'#type' => 'value',
		'#value' => "The database append query was successful!",
	);
	$form['failure_msg'] = array(
		'#type' => 'value',
		'#value' => "The database append query failed, please try again or contact support.",
	);
	return $form;
}
function fetchit_make_element_name($node_id,$row,$column) {
	//return 'fetchit_element_'.$node_id.'_'.$row.'_'.$column;
	return 'fetchit_element_'.$node_id.'_'.$row.'_'.$column;
}
function fetchit_make_element_controltype_name($node_id,$row,$column) {
	//return 'fetchit_element_controltype_'.$node_id.'_'.$row.'_'.$column;
	return $node_id.'_'.$row.'_'.$column.'controltype__element_fetchit';
}
/* 
 * validate the append record form
 * check entered data - happens after submit
 */
function fetchit_append_record_form_validateXXX($form, &$form_state) {
}
/* 
 * submit the append record form
 * actions you want to happen after submit and passed validation
 */
function fetchit_append_record_form_submitXXX($form, &$form_state) {
  /*
   * do two things
   * 1. append the new record to the table
   * 2. run the post-query
   */
  $setname = $form_state['values']['fieldset_name'];
  $elementbase = $form_state['values']['element_base'];
  $nid = $form_state['values']['nid'];
  $db_remote_table = $form_state['values']['db_table'];
  $db_remote_handle = $form_state['values']['db_handle'];
  $db_remote_field_list = $form_state['values']['db_field_list'];
  $db_remote_field_count = $form_state['values']['db_field_count'];
  $db_remote_field_types = $form_state['values']['db_field_types'];
  $success_msg = $form_state['values']['success_msg'];
  $failure_msg = $form_state['values']['failure_msg'];
  /*
   * set up the insert query
   */
  $db_query = 'INSERT INTO '.$db_remote_table.' ('.$db_remote_field_list.') VALUES (';
  /*
   * IMPORTANT - the array below is flattened (dropped the fieldset name) because #TREE is false by default
   */
  for ($j = 0; $j < $db_remote_field_count; $j++) {
    $field_value_string = $form_state['values'][$elementbase.$j];
    if ($j) {
      $db_query .= ',';
    }
    switch ($db_remote_field_types[$j]){
      case 'int8':
      case 'int4':
      case 'int2':
      case 'int':
      case 'integer':
      case 'short':
      case 'long':
        $db_query .= intval($field_value_string);
        break;
      case 'float':
      case 'real':
      case 'single':
      case 'double':
        $db_query .= floatval($field_value_string);
        break;
      case 'date':
        $db_query .= "DATE '".$field_value_string."'";
        break;
      case 'text':
      case 'char':
      DEFAULT:
        $db_query .= "'".$field_value_string."'";
    }
  }
  $db_query .= ')';
  /*
   * run the insert query
   */
  $results = pg_query($db_remote_handle, $db_query);
  if($results) {
  	drupal_set_message(t($success_msg));
  } else {
  	drupal_set_message(t($failure_msg),'warning');
  }
  /*
   * run the post query
   */
  $results = runFetchitPostQuery($nid);
}
function fetchit_make_val_str($val,$field_type) {
	switch (strtolower(trim($field_type))) {
		case 'bool': // a boolean from a pg database
		case 'boolean': // a generic type
			switch (strtolower(trim($val))) {
		        case "":
		        	return "NULL";
        		case "f":
		        case "false":
        		case "n":
        		case "no":
        		case "0":
          			return "FALSE";
		        case "t":
    		    case "true":
        		case "y":
        		case "yes":
	        	case "1":
    	    	case "-1":
        		default:
					return "TRUE";
			}
		case 'int2': // a small integer from a pg database
		case 'int4': // an integer from a pg database
		case 'int8': // a long integer from a pg database
		case 'integer': // a generic type
			if ($val == "") {
				return "NULL";
			} else {
				return strval(intval($val));
			}
		case 'numeric': // a "numeric" real number field from a pg database
		case 'float4': // a single precision real number field from a pg database
		case 'float8': // a double precision real number field from a pg database
		case 'real': // a generic type
			if ($val == "") {
				return "NULL";
			} else {
				return strval(floatval($val));
			}
		case 'text':  // a text field from a pg database
		case 'varchar': // a varchar field from a pg database
		case 'bpchar': // a bpchar field from a pg database
			return "'".pg_escape_string($val)."'";
		case 'date': // a date field from a pg database
			if ($val == "") {
				return "NULL";
			} else {
				return "DATE '".$val."'";
			}
		case 'time': // a time field from a pg database
		case 'timetz': // a time field with timezone from a pg database
			if ($val == "") {
				return "NULL";
			} else {
				return "TIME '".$val."'";
			}
		case 'timestamp': // a timestamp field from a pg database
		case 'timestamptz': // a timestamp field with timezone from a pg database
			if ($val == "") {
				return "NULL";
			} else {
				return "TIMESTAMP '".$val."'";
			}
		default: // an unanticipated field type, put a text box or single selects, but may not work
			if ($val == "") {
				return "NULL";
			} else {
				return "'".$val."'";
			}
	}
}
function fetchit_remove_records(&$err,&$db_handle,&$db_type,&$deletion_table,&$user_uid_field) {
	if($db_handle) {
		if($db_type) {
			switch ($db_type) {
				case F_DR_DBTYPE_PGSQL:
					if(strlen(trim($deletion_table))) {
						$qry = "DELETE FROM $deletion_table";
						if (strlen(trim($user_uid_field))) {
							global $user;
							$user_uid = $user->uid;
							$qry .= " WHERE $user_uid_field = $user_uid";
						}
						$db_result = pg_query($db_handle,$qry);
					} else {
						$err = 13;
					}
					break;
				case F_DR_DBTYPE_MYSQL:
				case F_DR_DBTYPE_MSSQL:
				default:
					$err = 13;
			}
		} else {
			$err = 13;
		}
	} else {
		$err = 13;
	}
}
function fetchit_run_query(&$err,&$db_type,&$db_handle,&$query) {
	switch ($db_type) {
		case F_DR_DBTYPE_PGSQL:
			$result = pg_query($db_handle,$query);
		case F_DR_DBTYPE_MYSQL:
			$err=10;
			break;
		case F_DR_DBTYPE_MSSQL:
			$err=11;
			break;
		default:
			$err=12;
	}
	return $result;
}
/*
 * define the append record form
 */
function fetchit_append_record_formXXX($nid) {
	/*
	 * create the db connection
	 */
	if (!$db_handle = getFetchitDBConnection($nid)) return $form;
	/*
	 * get one record from the external database table to append to
	 */
	$db_table = fetchit_get_cck_val("content_field_fetchit_append_table","field_fetchit_append_table_value",F_DR_NID_FLD,$nid);
	$query = "SELECT * FROM $db_table LIMIT 1";
	$db_object = pg_query($db_handle, $query);
  /*
   * get the field edit type parameters
   *   use a while loop tp read as many of these are there - hopefully this prevents having to change code if we add more CCK fields later
   */
  /*
  $fld_name=array();
  $fld_input_type=array();
  $fld_textbox_type=array();
  $fld_lst_tbl=array();
  $fld_lst_uid=array();
  $fld_val=array();
  $i=1;
  while ($fld_name[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_name","field_fetchit_field".$i."_name_value",F_DR_NID_FLD,$nid)) {
  	$fld_title[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_title","field_fetchit_field".$i."_title_value",F_DR_NID_FLD,$nid);
  	$fld_descr[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_descr","field_fetchit_field".$i."_descr_value",F_DR_NID_FLD,$nid);
  	$fld_input_type[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_input_type","field_fetchit_field".$i."_input_type_value",F_DR_NID_FLD,$nid);
  	$fld_textbox_type[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_textbox_type","field_fetchit_field".$i."_textbox_type_value",F_DR_NID_FLD,$nid);
  	$fld_lst_tbl[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_lst_tbl","field_fetchit_field".$i."_lst_tbl_value",F_DR_NID_FLD,$nid);
  	$fld_lst_uid[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_lst_uid","field_fetchit_field".$i."_lst_uid_value",F_DR_NID_FLD,$nid);
  	$fld_value[] = fetchit_get_cck_val("content_field_fetchit_field".$i."_value","field_fetchit_field".$i."_value_value",F_DR_NID_FLD,$nid);
  	$i++;
  }
  */
  /*
   * get some other variables to pass to the function
   */
  $submit_label = fetchit_get_cck_val("content_field_fetchit_submit_label","field_fetchit_submit_label_value",F_DR_NID_FLD,$nid);
  $post_fn = fetchit_get_cck_val("content_field_fetchit_post_function","field_fetchit_post_function_value",F_DR_NID_FLD,$nid);
  $append_title = fetchit_get_cck_val("content_field_fetchit_append_title","field_fetchit_append_title_value",F_DR_NID_FLD,$nid);
  $append_desc = fetchit_get_cck_val("content_field_fetchit_append_desc","field_fetchit_append_desc_value",F_DR_NID_FLD,$nid);
  /*
   * now pass these values to a function that creates the drupal form, then return that form
   */
  return drupal_get_form('pg_object_to_append_record_form_'.$nid,
                         $db_handle, $db_table, $db_object,
                         $submit_label, $post_fn, $append_title, $append_desc
                         //$fld_name, $fld_title, $fld_descr, $fld_input_type, $fld_textbox_type, $fld_lst_tbl, $fld_lst_uid, $fld_value
                         );
}
/*
 * define the gviz chart form
 */
function fetchit_gviz_form($nid) {
  /*
   * run the "pre" form display function
   */
    $myfield = "*";
    $mywhere = F_DR_NID_FLD;
    $mytable = "content_field_fetchit_pre_function";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $pre_fn = $row2->field_fetchit_pre_function_value;
    }
    if (strlen(trim($pre_fn))) {
      $mytable = "content_field_fetch_it_db_host";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_host = $row2->field_fetch_it_db_host_value;
      }
      $mytable = "content_field_fetch_it_db_type";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_type = $row2->field_fetch_it_db_type_value;
      }
      $mytable = "content_field_fetch_it_db_port";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_port = $row2->field_fetch_it_db_port_value;
      }
      $mytable = "content_field_fetch_it_db_name";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_name = $row2->field_fetch_it_db_name_value;
      }
      $mytable = "content_field_fetch_it_db_user";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_user = $row2->field_fetch_it_db_user_value;
      }
      $mytable = "content_field_fetch_it_db_password";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_password = $row2->field_fetch_it_db_password_value;
      }
      /*
       * create the database connection for the table/view to be displayed
       */
      $db_string = 'host='.$db_host;
      $db_string .= ' port='.$db_port;
      $db_string .= ' user='.$db_user;
      $db_string .= ' password='.$db_password;
      $db_string .= ' dbname='.$db_name;
      switch ($db_type) {
        case 'PostgreSQL':
          $db_handle = pg_connect($db_string) or drupal_set_message(t('Could not connect to pg server'));
          break;
        case 'MySQL':
          break;
        case 'SQLServer':
          break;
        default:
          $db_handle = pg_connect($db_string) or drupal_set_message(t('Could not connect to pg server'));
      }
      $query = $pre_fn;
      $db_object = pg_query($db_handle, $query);
    }
  /*
   * now get the json server data source stuff
   */
  $myfield = "*";
  $mytable = "content_type_fetchit_gviz";
  $mywhere = F_DR_NID_FLD;
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $url = $row2->field_fetchit_json_server_url_value;
  }
  $mytable = "content_type_fetchit_gviz";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $qry = $row2->field_fetchit_json_server_query_value;
  }
  $mytable = "content_field_fetchit_user_uid_field";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $user_uid_field = $row2->field_fetchit_user_uid_field_value;
  }
  if (strlen(trim($user_uid_field))) {
    global $user;
    $user_uid = $user->uid;
    $qry .= ' WHERE '.$user_uid_field.' = '.$user_uid;
  }
  $mytable = "content_type_fetchit_gviz";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $gviz_param = $row2->field_gviz_cc_params_value;
  }
  /*
   * now get and set the gviz chart parameters
   */
  $mytable = "content_type_fetchit_gviz";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $div_params = $row2->field_gviz_div_params_value;
  }
  $mytable = "content_type_fetchit_gviz";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $gviz_type_index = $row2->field_gviz_cc_type_value;
  }
  switch ($gviz_type_index) {
  case 0:
    $packages = 'table';
    $gviz_type = 'Table';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "allowHTML: true";
    }
    break;
  case 1:
    $packages = 'corechart';
    $gviz_type = 'BarChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 2:
    $packages = 'corechart';
    $gviz_type = 'ColumnChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 3:
    $packages = 'corechart';
    $gviz_type = 'LineChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 4:
    $packages = 'corechart';
    $gviz_type = 'AreaChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 5:
    $packages = 'corechart';
    $gviz_type = 'ScatterChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 6:
    $packages = 'corechart';
    $gviz_type = 'PieChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 7:
    $packages = 'gauge';
    $gviz_type = 'Gauge';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 8:
    $packages = 'motionchart';
    $gviz_type = 'MotionChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 9:
    $packages = 'map';
    $gviz_type = 'Map';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 400, width: 400";
    }
    break;
  case 10:
    $packages = 'annotatedtimeline';
    $gviz_type = 'AnnotatedTimeLine';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "displayAnnotations: true";
    }
    break;
  case 11:
    $packages = 'dygraphs';
    $gviz_type = 'dygraphs';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  default:
    $packages = 'table';
    $gviz_type = 'Table';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "allowHTML: true";
    }
  }
  $labels = array();
  for ($i = 0; $i < 10; $i++) {
    $mytable = "content_type_fetchit_gviz";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $fieldname = "field_gviz_c".trim(strval($i+1))."_label_value";
      $labels[$i] = $row2->$fieldname;
    }
  }
  $data_formatters = array();
  for ($i = 0; $i < 10; $i++) {
    $mytable = "content_type_fetchit_gviz";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $fieldname = "field_gviz_c".trim(strval($i+1))."_df_value";
      $data_formatters[$i] = $row2->$fieldname;
    }
  }
  /*
   * create the HTML for the gviz chart form
   */
  return drupal_get_form('fetchit_gviz_form_'.$nid,
                         $packages, $url, $qry, $nid, $gviz_type, $gviz_param, $labels, $data_formatters, $div_params);
}
/*
 * define the gviz form
 */
function fetchit_gviz_form_builder(&$form_state,$form_id,$args) {
  /*
   * redefine the arguments from the args array
   * (&$form_state, $nid, $type) 
   */
  $packages = $args[0];
  $url = $args[1];
  $qry = $args[2];
  $nid = $args[3];
  $gviz_type = $args[4];
  $gviz_param = $args[5];
  $labels = $args[6];
  $data_formatters = $args[7];
  $div_params = $args[8];
  /*
   * now create the form
   */
  $element_name = 'gviz_form_element_'.$nid;
  $form[$element_name]=array(
      '#type' => 'markup',
      '#value' => gviz_html($packages, $url, $qry, $nid, $gviz_type, $gviz_param, $labels, $data_formatters, $div_params),
  );
  return $form;
}
function gviz_html($packages, $json_data_source_url, $json_data_source_query, $id, $chart_type, $chart_params, $labels, $data_formatters, $div_params){
  $output = '';
  $output .= "<script type='text/javascript'";
  $output .= "  src='http://www.google.com/jsapi'>";
  $output .= "</script>";
  if ($packages == 'dygraphs') {
    $output .= "<script type='text/javascript'";
    $output .= "  src='/misc/dygraphs-combined.js'>";
    $output .= "</script>";
  }
  $output .= "<script type='text/javascript'>";
  $output .= "  google.load('visualization', '1', {'packages': ['".$packages."']});";
  $output .= "  function qry_Callback_".$id."(response) {";
  $output .= "    var data = response.getDataTable();";
  for ($i = 0; $i < 10; $i++) {
    if (strlen(trim($labels[$i]))) {
      $output .= "data.setColumnLabel(".$i.", '".$labels[$i]."');";
    }
    if (strlen(trim($data_formatters[$i]))) {
      $output .= "var formatter$i = new google.visualization.$data_formatters[$i];";
      $output .= "formatter$i.format(data, $i);";
    }
  }
  $output .= "    viz_$id.draw(data, { $chart_params });";
  $output .= "  }";
  $output .= "  function drawVisualization_$id() {";
  $output .= "    viz_$id = new google.visualization.$chart_type(document.getElementById('div_id_$id'));"; //gviz_lastrun_div
  $output .= "    var qry = new google.visualization.Query('$json_data_source_url');";
  $output .= "    qry.setQuery('$json_data_source_query');";
  $output .= "    qry.send(qry_Callback_$id);";
  $output .= "  }";
  $output .= "  google.setOnLoadCallback(drawVisualization_$id);";
  $output .= "</script>  ";
  $output .= "<body>";
  $output .= "  <div id='div_id_$id' $div_params>";
  $output .= "  </div>";
  $output .= "</body>  ";
  return $output;
}
function fetchit_ol_form($nid) {
  /*
   * create the HTML for the open layers form
   */
  return drupal_get_form('fetchit_ol_form_'.$nid,$nid);
}
/*
 * define the gviz form
 */
function fetchit_ol_form_builder(&$form_state,$form_id,$args) {
  /*
   * redefine the arguments from the args array
   * (&$form_state, $nid, $type) 
   */
  $nid = $args[0];
  /*
   * now create the form
   */
  $element_name = 'ol_form_element_'.$nid;
  $form[$element_name]=array(
      '#type' => 'markup',
      '#value' => ol_html($nid),
  );
  return $form;
}
function ol_html($id){
  $output = '';
  $output .= "<head>";
  $output .= "  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />";
  $output .= "  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />";
  $output .= "  <title>LRE fetchit OpenLayers Examples</title>";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/theme/default/style.css\" type=\"text/css\">";
  //$output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/examples/style.css\" type=\"text/css\">";
  $output .= "  <script src='http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAloaoo8YwfYWHYxLJhRA8yBSL_EQb55qKRhS4tU9No98gjBTzAxRsxlTiJhIGb-F0phR714pZ64e5BQ'></script>";
  $output .= "  <script type='text/javascript' src='misc/OpenLayers/OpenLayers.js'></script>";
  $output .= "  <script type='text/javascript'>";
  $output .= "  OpenLayers.IMAGE_RELOAD_ATTEMPTS = 3;";
  $output .= "  var map;";
  $output .= "  function init(){";
  //$output .= "    alert(\"function init()\");";
  /*
   * setup the map object
   */
  //$output .= "    var maxExtent = new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508);";
  $output .= "    var maxExtent = new OpenLayers.Bounds(-12200000, 4400000, -11200000, 5000000);";
  $output .= "    var restrictedExtent = maxExtent.clone();";
  $output .= "    var maxResolution = 156543.0339;";
  $output .= "    var options = {";
  $output .= "          projection: new OpenLayers.Projection(\"EPSG:900913\"),";
  $output .= "          units: \"m\",";
  $output .= "          numZoomLevels: 18,";
  $output .= "          maxResolution: maxResolution,";
  $output .= "          maxExtent: maxExtent,";
  $output .= "          restrictedExtent: restrictedExtent";
  $output .= "        };";
  $output .= "    map = new OpenLayers.Map('map', options);";
  /*
   * set up the layers
   */
  $output .= "    var wms_title2 = \"LRE WMS madis stations overlay\";";
  $output .= "    var wms_server_url2 = \"http://lregis/cgi-bin/mapserv\";";
  $output .= "    var wms_map2 = \"/var/www/mpsrvr/madis_stations_sphmerc.map\";";
  $output .= "    var wms_layer2 = \"madis_stations_sphmerc\";";
  $output .= "    var layer2 = new OpenLayers.Layer.MapServer(";
  $output .= "                  wms_title2,";
  $output .= "                  wms_server_url2,";
  $output .= "                  { layers: wms_layer2,";
  $output .= "                    map: wms_map2,";
  $output .= "                    'map_transparent': 'ON',";
  $output .= "                    format: 'image/png',";
  $output .= "                  },";
  $output .= "                  { isBaseLayer: false,";
  $output .= "                    opacity: 0.5,";
  $output .= "                  }";
  $output .= "                );";
  /*
  $output .= "    var wms_title3 = \"LRE WMS madis stations epsg 4269 overlay\";";
  $output .= "    var wms_server_url3 = \"http://lregis/cgi-bin/mapserv\";";
  $output .= "    var wms_map3 = \"/var/www/mpsrvr/madis_stations.map\";";
  $output .= "    var wms_layer3 = \"madis_stations_epsg4269\";";
  $output .= "    var layer3 = new OpenLayers.Layer.MapServer(";
  $output .= "                  wms_title3,";
  $output .= "                  wms_server_url3,";
  $output .= "                  { layers: wms_layer3,";
  $output .= "                    map: wms_map3,";
  $output .= "                    transparent: true";
  $output .= "                  },";
  $output .= "                  { isBaseLayer: false,";
  $output .= "                    opacity: 0.4,";
  $output .= "                    projection: \"EPSG:4269\"";
  $output .= "                  }";
  $output .= "                );";
  $output .= "    var wms_title4 = \"LRE WMS states shp\";";
  $output .= "    var wms_server_url4 = \"http://lregis/cgi-bin/mapserv\";";
  $output .= "    var wms_map4 = \"/var/www/mpsrvr/jimtest.map\";";
  $output .= "    var wms_layer4 = \"states\";";
  $output .= "    var layer4 = new OpenLayers.Layer.MapServer(";
  $output .= "                  wms_title4,";
  $output .= "                  wms_server_url4,";
  $output .= "                  { layers: wms_layer4,";
  $output .= "                    map: wms_map4,";
  $output .= "                    transparent: true";
  $output .= "                  },";
  $output .= "                  { isBaseLayer: false,";
  $output .= "                    opacity: 0.2";
  $output .= "                  }";
  $output .= "                );";
  $output .= "    var layer5 = new OpenLayers.Layer.WMS(";
  $output .= "                  \"States\",";
  $output .= "                  \"http://lregis/cgi-bin/mapserv\",";
  $output .= "                  { 'layers': 'states',";
  $output .= "                    'map': '/var/www/mpsrvr/nitelite.map',";
  $output .= "                    transparent: true,";
  $output .= "                    format: 'image/gif'";
  $output .= "                  },";
  $output .= "                  { isBaseLayer: false";
  $output .= "                  }";
  $output .= "                );";
  */
  $output .= "    var gmap = new OpenLayers.Layer.Google(";
  $output .= "                     \"Google Streets\",";
  $output .= "                     {sphericalMercator: true}";
  $output .= "                   );";
  $output .= "    var gsat = new OpenLayers.Layer.Google(";
  $output .= "                     \"Google Satellite\",";
  $output .= "                     {type: G_SATELLITE_MAP, sphericalMercator: true, numZoomLevels: 22}";
  $output .= "                   );";
  $output .= "    var ghyb = new OpenLayers.Layer.Google(";
  $output .= "                     \"Google Hybrid\",";
  $output .= "                     {type: G_HYBRID_MAP, sphericalMercator: true}";
  $output .= "                   );";
  $output .= "    var highlight = new OpenLayers.Layer.Vector(\"Highlighted Features\",";
  $output .= "                       { displayInLayerSwitcher: false,";
  $output .= "                         isBaseLayer: false,";
  $output .= "                       }";
  $output .= "                     );";
  $output .= "    var vector = new OpenLayers.Layer.Vector(\"Editable Vectors\");";
  $output .= "    map.addLayers([gmap,gsat,ghyb,layer2,vector,highlight]);";
  $output .= "    info = new OpenLayers.Control.WMSGetFeatureInfo(";
  $output .= "                 { url: 'http://lregis/cgi-bin/mapserv?map=/var/www/mpsrvr/madis_stations_sphmerc.map&',"; 
  $output .= "                   title: 'Identify features by clicking',";
  $output .= "                   queryVisible: true,";
  $output .= "                   eventListeners:";
  $output .= "                     { getfeatureinfo: function(event) {";
  $output .= "                                         map.addPopup(new OpenLayers.Popup.FramedCloud(";
  $output .= "                                                            \"chicken\",";
  $output .= "                                                            map.getLonLatFromPixel(event.xy),";
  $output .= "                                                            null,";
  $output .= "                                                            event.text,";
  $output .= "                                                            null,";
  $output .= "                                                            true";
  $output .= "                                                          )";
  $output .= "                                         );";
  $output .= "                                       }";
  $output .= "                     }";
  $output .= "                 }";
  $output .= "               );";
  $output .= "    map.addControl(info);";
  $output .= "    info.activate();";
  $output .= "    map.addControl(new OpenLayers.Control.LayerSwitcher());";
  $output .= "    map.addControl(new OpenLayers.Control.EditingToolbar(vector));";
  $output .= "    map.addControl(new OpenLayers.Control.Permalink());";
  $output .= "    map.addControl(new OpenLayers.Control.MousePosition());";
  $output .= "    if (!map.getCenter()) {map.zoomToMaxExtent()}";
  $output .= "  }";
  $output .= "  </script>";
  $output .= "</head>";
  $output .= "<body onload=\"init()\">";
  //$output .= "  <div id=\"tags\">fetchit openlayers</div>";
  $output .= "  <div id=\"map\" style=\"width: 100%; height: 700px;\"></div>";
  $output .= "</body>";
  return $output;
}
function ol_html_simple_wms_works($id){
  $output = '';
  $output .= "<head>";
  $output .= "  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />";
  $output .= "  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />";
  $output .= "  <title>LRE fetchit OpenLayers Examples</title>";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/theme/default/style.css\" type=\"text/css\">";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/examples/style.css\" type=\"text/css\">";
  $output .= "  <script type='text/javascript' src='misc/OpenLayers/OpenLayers.js'></script>";
  $output .= "  <script type='text/javascript'>";
  //$output .= "  var lon = 5;";
  //$output .= "  var lat = 40;";
  //$output .= "  var zoom = 5;";
  $output .= "  var map, layer;";
  $output .= "  function init(){";
  $output .= "    alert(\"function init()\");";
  $output .= "    map = new OpenLayers.Map('map');";
  $output .= "    var wms_title1 = \"LRE WMS madis stations as base map\";";
  $output .= "    var wms_server_url1 = \"http://lregis/cgi-bin/mapserv\";";
  $output .= "    var wms_map1 = \"/var/www/mpsrvr/madis_stations.map\";";
  $output .= "    var wms_layer1 = \"madis_stations\";";
  $output .= "    var layer1 = new OpenLayers.Layer.MapServer(";
  $output .= "                  wms_title1,";
  $output .= "                  wms_server_url1,";
  $output .= "                  { layers: wms_layer1,";
  $output .= "                    map: wms_map1";
  $output .= "                  }";
  $output .= "                );";
  $output .= "    map.addLayer( layer1 );";
  $output .= "    map.zoomToMaxExtent();";
  //$output .= "    map.setCenter( new OpenLayers.LonLat(lon, lat), zoom );";
  //$output .= "    map.addControl( new OpenLayers.Control.LayerSwitcher() );";
  $output .= "  }";
  $output .= "  </script>";
  $output .= "</head>";
  $output .= "<body onload=\"init()\">";
  $output .= "  <div id=\"tags\">fetchit openlayers</div>";
  $output .= "  <div id=\"map\" class=\"smallmap\"></div>";
  $output .= "</body>";
  return $output;
}
function ol_html_complex_multilayer_works($id){
  $output = '';
  $output .= "<head>";
  $output .= "  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />";
  $output .= "  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />";
  $output .= "  <title>LRE fetchit OpenLayers Example</title>";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/theme/default/style.css\" type=\"text/css\">";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/examples/style.css\" type=\"text/css\">";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/fetchit/ol_style_1.css\" type=\"text/css\">";
  $output .= "  <script src='http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.1'></script>";
  $output .= "  <script src='http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAloaoo8YwfYWHYxLJhRA8yBSL_EQb55qKRhS4tU9No98gjBTzAxRsxlTiJhIGb-F0phR714pZ64e5BQ'></script>";
  $output .= "  <script src='http://api.maps.yahoo.com/ajaxymap?v=3.0&appid=euzuro-openlayers'></script>";
  $output .= "  <script type='text/javascript' src='misc/OpenLayers/OpenLayers.js'></script>";
  $output .= "  <script type='text/javascript' src='scripts/fetchit/ol_1.js'></script>";
  $output .= "</head>";
  $output .= "<body onload=\"init()\">";
  $output .= "  <div id=\"tags\">openstreetmap basic</div>";
  $output .= "  <div id=\"map\" class=\"smallmap\"></div>";
  $output .= "</body>";
  return $output;
}
function ol_html_simple_osm_works($id){
  $output = '';
  $output .= "<head>";
  $output .= "  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />";
  $output .= "  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />";
  $output .= "  <title>OpenLayers Basic Single WMS Example</title>";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/theme/default/style.css\" type=\"text/css\">";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/examples/style.css\" type=\"text/css\">";
  $output .= "  <script type='text/javascript' src='misc/OpenLayers/OpenLayers.js'></script>";
  $output .= "  <script type='text/javascript'>";
  $output .= "  var map_$id, layer_$id;";
  $output .= "  function drawMap_$id(){";
  $output .= "    alert(\"function drawMap_$id\");";
  $output .= "    map_$id = new OpenLayers.Map('div_map_$id');";
  $output .= "    layer_$id = new OpenLayers.Layer.OSM( \"Simple OSM Map\");";
  $output .= "    map_$id.addLayer(layer_$id);";
  $output .= "    map_$id.setCenter(";
  $output .= "      new OpenLayers.LonLat(-71.147, 42.472).transform(";
  $output .= "        new OpenLayers.Projection(\"EPSG:4326\"),";
  $output .= "        map_$id.getProjectionObject()";
  $output .= "      ), 12";
  $output .= "    );";
  $output .= "  }";
  $output .= "</script>  ";
  $output .= "</head>";
  $output .= "<body onload=\"drawMap_$id()\">";
  $output .= "  <div id=\"tags\">openstreetmap basic</div>";
  $output .= "  <div id=\"div_map_$id\" class=\"smallmap\"></div>";
  $output .= "</body>";
  return $output;
}
function fetchit_gviz_ol_form($nid) {
  /*
   * run the "pre" form display function
   */
    $myfield = "*";
    $mywhere = F_DR_NID_FLD;
    $mytable = "content_field_fetchit_pre_function";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $pre_fn = $row2->field_fetchit_pre_function_value;
    }
    if (strlen(trim($pre_fn))) {
      $mytable = "content_field_fetch_it_db_host";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_host = $row2->field_fetch_it_db_host_value;
      }
      $mytable = "content_field_fetch_it_db_type";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_type = $row2->field_fetch_it_db_type_value;
      }
      $mytable = "content_field_fetch_it_db_port";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_port = $row2->field_fetch_it_db_port_value;
      }
      $mytable = "content_field_fetch_it_db_name";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_name = $row2->field_fetch_it_db_name_value;
      }
      $mytable = "content_field_fetch_it_db_user";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_user = $row2->field_fetch_it_db_user_value;
      }
      $mytable = "content_field_fetch_it_db_password";
      $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
      while ($row2 = db_fetch_object($results2)) {
        $db_password = $row2->field_fetch_it_db_password_value;
      }
      /*
       * create the database connection for the table/view to be displayed
       */
      $db_string = 'host='.$db_host;
      $db_string .= ' port='.$db_port;
      $db_string .= ' user='.$db_user;
      $db_string .= ' password='.$db_password;
      $db_string .= ' dbname='.$db_name;
      switch ($db_type) {
        case 'PostgreSQL':
          $db_handle = pg_connect($db_string) or drupal_set_message(t('Could not connect to pg server'));
          break;
        case 'MySQL':
          break;
        case 'SQLServer':
          break;
        default:
          $db_handle = pg_connect($db_string) or drupal_set_message(t('Could not connect to pg server'));
      }
      $query = $pre_fn;
      $db_object = pg_query($db_handle, $query);
    }
  /*
   * now get the json server data source stuff
   */
  $myfield = "*";
  $mytable = "content_field_fetchit_json_server_url";
  $mywhere = F_DR_NID_FLD;
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $url = $row2->field_fetchit_json_server_url_value;
  }
  $mytable = "content_field_fetchit_json_server_query";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $qry = $row2->field_fetchit_json_server_query_value;
  }
  $mytable = "content_field_fetchit_user_uid_field";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $user_uid_field = $row2->field_fetchit_user_uid_field_value;
  }
  if (strlen(trim($user_uid_field))) {
    global $user;
    $user_uid = $user->uid;
    $qry .= ' WHERE '.$user_uid_field.' = '.$user_uid;
  }
  $mytable = "content_field_gviz_cc_params";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $gviz_param = $row2->field_gviz_cc_params_value;
  }
  /*
   * now get and set the gviz chart parameters
   */
  $mytable = "content_field_gviz_div_params";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $div_params = $row2->field_gviz_div_params_value;
  }
  $mytable = "content_field_gviz_cc_type";
  $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
  while ($row2 = db_fetch_object($results2)) {
    $gviz_type_index = $row2->field_gviz_cc_type_value;
  }
  switch ($gviz_type_index) {
  case 0:
    $packages = 'table';
    $gviz_type = 'Table';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "allowHTML: true";
    }
    break;
  case 1:
    $packages = 'corechart';
    $gviz_type = 'BarChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 2:
    $packages = 'corechart';
    $gviz_type = 'ColumnChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 3:
    $packages = 'corechart';
    $gviz_type = 'LineChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 4:
    $packages = 'corechart';
    $gviz_type = 'AreaChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 5:
    $packages = 'corechart';
    $gviz_type = 'ScatterChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 6:
    $packages = 'corechart';
    $gviz_type = 'PieChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 7:
    $packages = 'gauge';
    $gviz_type = 'Gauge';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 8:
    $packages = 'motionchart';
    $gviz_type = 'MotionChart';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  case 9:
    $packages = 'map';
    $gviz_type = 'Map';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 400, width: 400";
    }
    break;
  case 10:
    $packages = 'annotatedtimeline';
    $gviz_type = 'AnnotatedTimeLine';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "displayAnnotations: true";
    }
    break;
  case 11:
    $packages = 'dygraphs';
    $gviz_type = 'dygraphs';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "height: 260, width: 400";
    }
    break;
  default:
    $packages = 'table';
    $gviz_type = 'Table';
    if (strlen(trim($gviz_param)) == 0) {
    	$gviz_param = "allowHTML: true";
    }
  }
  $labels = array();
  for ($i = 0; $i < 10; $i++) {
    $mytable = "content_field_gviz_c".trim(strval($i+1))."_label";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $fieldname = "field_gviz_c".trim(strval($i+1))."_label_value";
      $labels[$i] = $row2->$fieldname;
    }
  }
  $data_formatters = array();
  for ($i = 0; $i < 10; $i++) {
    $mytable = "content_field_gviz_c".trim(strval($i+1))."_df";
    $results2=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$myfield,$mytable,$mywhere,$nid);
    while ($row2 = db_fetch_object($results2)) {
      $fieldname = "field_gviz_c".trim(strval($i+1))."_df_value";
      $data_formatters[$i] = $row2->$fieldname;
    }
  }
  /*
   * create the HTML for the gviz ol chart form
   */
  return drupal_get_form('fetchit_gviz_ol_form_'.$nid,
                         $packages, $url, $qry, $nid, $gviz_type, $gviz_param, $labels, $data_formatters, $div_params);
}
function fetchit_gviz_ol_form_builder(&$form_state,$form_id,$args) {
  /*
   * redefine the arguments from the args array
   * (&$form_state, $nid, $type) 
   */
  $packages = $args[0];
  $url = $args[1];
  $qry = $args[2];
  $nid = $args[3];
  $gviz_type = $args[4];
  $gviz_param = $args[5];
  $labels = $args[6];
  $data_formatters = $args[7];
  $div_params = $args[8];
  /*
   * now create the form
   */
  $element_name = 'gviz_form_element_'.$nid;
  $form[$element_name]=array(
      '#type' => 'markup',
      '#value' => gviz_ol_html($packages, $url, $qry, $nid, $gviz_type, $gviz_param, $labels, $data_formatters, $div_params),
  );
  return $form;
}
function gviz_ol_html($packages, $json_data_source_url, $json_data_source_query, $id, $chart_type, $chart_params, $labels, $data_formatters, $div_params){
  $output = '';
  $output .= "<head>";
  $output .= "  <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />";
  $output .= "  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />";
  $output .= "  <title>OpenLayers Basic Single WMS Example</title>";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/theme/default/style.css\" type=\"text/css\">";
  $output .= "  <link rel=\"stylesheet\" href=\"misc/OpenLayers/examples/style.css\" type=\"text/css\">";
  $output .= "  <script type='text/javascript' src='misc/OpenLayers/OpenLayers.js'></script>";
  $output .= "  <script type='text/javascript'>";
  $output .= "  var map_$id, layer_$id;";
  $output .= "  function drawMap_$id(){";
  $output .= "    alert(\"function drawMap_$id\");";
  $output .= "    map_$id = new OpenLayers.Map('div_map_$id');";
  $output .= "    layer_$id = new OpenLayers.Layer.OSM( \"Simple OSM Map\");";
  $output .= "    map_$id.addLayer(layer_$id);";
  $output .= "    map_$id.setCenter(";
  $output .= "      new OpenLayers.LonLat(-71.147, 42.472).transform(";
  $output .= "        new OpenLayers.Projection(\"EPSG:4326\"),";
  $output .= "        map.getProjectionObject()";
  $output .= "      ), 12";
  $output .= "    );";
  $output .= "  }";
  /*
  $output .= "  var lon = -104.98;";
  $output .= "  var lat = 39.73;";
  $output .= "  var zoom = 8;";
  $output .= "  var map, layer;";
  $output .= "  function drawMap_$id() {";
  $output .= "    alert(\"function drawMap_$id\");";
  $output .= "    map = new OpenLayers.Map({div: 'map', allOverlays: true});";
  $output .= "    var mapnik = new OpenLayers.Layer.OSM();";
  $output .= "    map.addLayer(mapnik);";
  $output .= "    var lon_map_center = -104.99;";
  $output .= "    var lat_map_center = 39.748;";
  $output .= "    var proj_orig = \"EPSG:4326\";"; 
  $output .= "    var lonlat_map_center_proj_orig = new OpenLayers.LonLat(lon_map_center,lat_map_center);";
  $output .= "    var proj_osm = \"EPSG:900913\";";
  $output .= "    var lonlat_map_center_proj_osm = lonlat_map_center_proj_orig.transform(proj_orig,proj_osm);";
  $output .= "    var zoom_level_osm = 15;";  
  $output .= "    map.setCenter(lonlat_map_center_proj_osm,zoom_level_osm);";
  $output .= "    map.addControl(new OpenLayers.Control.LayerSwitcher());";
  */
  /*
   * some WMS examples
   */
  /*
  $output .= "    var ol_wms = new OpenLayers.Layer.WMS(";
  $output .= "                   \"OpenLayers WMS\",";
  $output .= "                   \"http://vmap0.tiles.osgeo.org/wms/vmap0\",";
  $output .= "                   {layers: \"basic\"}";
  $output .= "                 );";
  $output .= "    var dm_wms = new OpenLayers.Layer.WMS(";
  $output .= "                   \"Canadian Data\",";
  $output .= "                   \"http://www2.dmsolutions.ca/cgi-bin/mswms_gmap\",";
  $output .= "                   {";
  $output .= "                     layers: \"bathymetry,land_fn,park,drain_fn,drainage,\" +";
  $output .= "                             \"prov_bound,fedlimit,rail,road,popplace\",";
  $output .= "                     transparent: \"true\",";
  $output .= "                     format: \"image/png\"";
  $output .= "                   },";
  $output .= "                   {isBaseLayer: false, visibility: false}";
  $output .= "                 );";
  $output .= "      map.addLayers([ol_wms, dm_wms]);";
  $output .= "      map.addControl(new OpenLayers.Control.LayerSwitcher());";
  $output .= "      map.zoomToMaxExtent();";
  */
  $output .= "</script>  ";
  $output .= "</head>";
  $output .= "<body onload=\"drawMap_$id()\">";
  $output .= "  <div id=\"tags\">openstreetmap basic</div>";
  $output .= "  <div id=\"div_map_$id\" class=\"smallmap\"></div>";
  $output .= "</body>";
  return $output;
}
/*
 * this function grabs a value field value from the CCK tables
 *   IMPORTANT assumes the fields are used multiple times and stored in separate tables
 *   it loops through all the matching records and returns the last one
 */
function fetchit_get_cck_val($t,$rf,$wf,$wfv) {
	/*if (!$t || !$rf) {
		$trace = debug_backtrace();
		dpm($trace);
	}*/
  $dbo=db_query("SELECT %s FROM {%s} WHERE %s = %d;",$rf,$t,$wf,$wfv);
  while ($r = db_fetch_object($dbo)) {
    $result = $r->$rf;
  }
  return $result;
}
/*
 * get values from the drupal cck tables using an integer where clause
 */
/*
function getValwi($drtable,$drfield,$wFld,$wVal) {
	$output = null;
	$results = db_query('SELECT %s FROM {%s} WHERE %s = %d',$drfield,$drtable,$wFld,$wVal);
	while ($row = db_fetch_object($results)) {
		$output = $row->$drfield;
	}
	return $output;
}
*/
/*
 * a useful function, but I really should be using the devel module instead
 */
/*
function dduummpp($value,$level=0) {
  if ($level==-1) {
    $trans[' ']='&there4;';
    $trans["\t"]='&rArr;';
    $trans["\n"]='&para;;';
    $trans["\r"]='&lArr;';
    $trans["\0"]='&oplus;';
    return strtr(htmlspecialchars($value),$trans);
  }
  if ($level==0) echo '<pre>';
  $type= gettype($value);
  echo $type;
  if ($type=='string') {
    echo '('.strlen($value).')';
    $value= dump($value,-1);
  }
  elseif ($type=='boolean') $value= ($value?'true':'false');
  elseif ($type=='object') {
    $props= get_class_vars(get_class($value));
    echo '('.count($props).') <u>'.get_class($value).'</u>';
    foreach($props as $key=>$val) {
      echo "\n".str_repeat("\t",$level+1).$key.' => ';
      dump($value->$key,$level+1);
    }
    $value= '';
  }
  elseif ($type=='array') {
    echo '('.count($value).')';
    foreach($value as $key=>$val) {
      echo "\n".str_repeat("\t",$level+1).dump($key,-1).' => ';
      dump($val,$level+1);
    }
    $value= '';
  }
  echo " <b>$value</b>";
  if ($level==0) echo '</pre>';
}
*/
